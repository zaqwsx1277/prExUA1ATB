
pr429ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006134  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006374  08006374  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800637c  0800637c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac4  20000010  08006394  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ad4  08006394  00024ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f891  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d5e  00000000  00000000  0003f8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  00043630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e8  00000000  00000000  00044ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000279c6  00000000  00000000  000465d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015f9c  00000000  00000000  0006df96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f16f1  00000000  00000000  00083f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b0  00000000  00000000  001756a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080062cc 	.word	0x080062cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080062cc 	.word	0x080062cc

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_ETH_Init+0x88>)
 80004f6:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_ETH_Init+0x8c>)
 80004f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ETH_Init+0x88>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_ETH_Init+0x88>)
 8000502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000506:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_ETH_Init+0x88>)
 800050a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800050e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ETH_Init+0x88>)
 8000512:	2201      	movs	r2, #1
 8000514:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_ETH_Init+0x88>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_ETH_Init+0x88>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	3301      	adds	r3, #1
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <MX_ETH_Init+0x88>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	3302      	adds	r3, #2
 800052e:	22e1      	movs	r2, #225	; 0xe1
 8000530:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_ETH_Init+0x88>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	3303      	adds	r3, #3
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_ETH_Init+0x88>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	3304      	adds	r3, #4
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_ETH_Init+0x88>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	3305      	adds	r3, #5
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_ETH_Init+0x88>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_ETH_Init+0x88>)
 8000558:	2200      	movs	r2, #0
 800055a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_ETH_Init+0x88>)
 800055e:	2200      	movs	r2, #0
 8000560:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_ETH_Init+0x88>)
 8000564:	f000 fdd4 	bl	8001110 <HAL_ETH_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ETH_Init+0x82>
  {
    Error_Handler();
 800056e:	f000 fa89 	bl	8000a84 <Error_Handler>
  }

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20004934 	.word	0x20004934
 800057c:	40028000 	.word	0x40028000

08000580 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08e      	sub	sp, #56	; 0x38
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a55      	ldr	r2, [pc, #340]	; (80006f4 <HAL_ETH_MspInit+0x174>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	f040 80a3 	bne.w	80006ea <HAL_ETH_MspInit+0x16a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	623b      	str	r3, [r7, #32]
 80005a8:	4b53      	ldr	r3, [pc, #332]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a52      	ldr	r2, [pc, #328]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
 80005b4:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005bc:	623b      	str	r3, [r7, #32]
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a4b      	ldr	r2, [pc, #300]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
 80005d0:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005d8:	61fb      	str	r3, [r7, #28]
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	4b45      	ldr	r3, [pc, #276]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a44      	ldr	r2, [pc, #272]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
 80005ec:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a3d      	ldr	r2, [pc, #244]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 0310 	and.w	r3, r3, #16
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a36      	ldr	r2, [pc, #216]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
 8000624:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 8000656:	f043 0302 	orr.w	r3, r3, #2
 800065a:	6313      	str	r3, [r2, #48]	; 0x30
 800065c:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <HAL_ETH_MspInit+0x178>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ETH_RXD3
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000668:	2304      	movs	r3, #4
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000678:	230b      	movs	r3, #11
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	481e      	ldr	r0, [pc, #120]	; (80006fc <HAL_ETH_MspInit+0x17c>)
 8000684:	f001 f9b2 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000688:	233e      	movs	r3, #62	; 0x3e
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000698:	230b      	movs	r3, #11
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a0:	4619      	mov	r1, r3
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <HAL_ETH_MspInit+0x180>)
 80006a4:	f001 f9a2 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80006a8:	2386      	movs	r3, #134	; 0x86
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b8:	230b      	movs	r3, #11
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <HAL_ETH_MspInit+0x184>)
 80006c4:	f001 f992 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12 
 80006c8:	f643 0303 	movw	r3, #14339	; 0x3803
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006da:	230b      	movs	r3, #11
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	4619      	mov	r1, r3
 80006e4:	4808      	ldr	r0, [pc, #32]	; (8000708 <HAL_ETH_MspInit+0x188>)
 80006e6:	f001 f981 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006ea:	bf00      	nop
 80006ec:	3738      	adds	r7, #56	; 0x38
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40028000 	.word	0x40028000
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40021000 	.word	0x40021000
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000
 8000708:	40020400 	.word	0x40020400

0800070c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000710:	4a08      	ldr	r2, [pc, #32]	; (8000734 <MX_FREERTOS_Init+0x28>)
 8000712:	2100      	movs	r1, #0
 8000714:	4808      	ldr	r0, [pc, #32]	; (8000738 <MX_FREERTOS_Init+0x2c>)
 8000716:	f003 f8cf 	bl	80038b8 <osThreadNew>
 800071a:	4602      	mov	r2, r0
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_FREERTOS_Init+0x30>)
 800071e:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <MX_FREERTOS_Init+0x34>)
 8000722:	2100      	movs	r1, #0
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <MX_FREERTOS_Init+0x38>)
 8000726:	f003 f8c7 	bl	80038b8 <osThreadNew>
 800072a:	4602      	mov	r2, r0
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_FREERTOS_Init+0x3c>)
 800072e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08006314 	.word	0x08006314
 8000738:	0800074d 	.word	0x0800074d
 800073c:	2000497c 	.word	0x2000497c
 8000740:	08006338 	.word	0x08006338
 8000744:	0800075d 	.word	0x0800075d
 8000748:	20004980 	.word	0x20004980

0800074c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f003 f955 	bl	8003a04 <osDelay>
 800075a:	e7fb      	b.n	8000754 <StartDefaultTask+0x8>

0800075c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f003 f94d 	bl	8003a04 <osDelay>
 800076a:	e7fb      	b.n	8000764 <StartTask02+0x8>

0800076c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_GPIO_Init+0xa0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a24      	ldr	r2, [pc, #144]	; (800080c <MX_GPIO_Init+0xa0>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_GPIO_Init+0xa0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_GPIO_Init+0xa0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a1d      	ldr	r2, [pc, #116]	; (800080c <MX_GPIO_Init+0xa0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_GPIO_Init+0xa0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_GPIO_Init+0xa0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <MX_GPIO_Init+0xa0>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_GPIO_Init+0xa0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_GPIO_Init+0xa0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <MX_GPIO_Init+0xa0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_GPIO_Init+0xa0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_GPIO_Init+0xa0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <MX_GPIO_Init+0xa0>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_GPIO_Init+0xa0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

}
 80007fe:	bf00      	nop
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_I2C1_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	; (800088c <MX_I2C1_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_I2C1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_I2C1_Init+0x74>)
 800082e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_I2C1_Init+0x74>)
 800084e:	f001 fa77 	bl	8001d40 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 f914 	bl	8000a84 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4809      	ldr	r0, [pc, #36]	; (8000884 <MX_I2C1_Init+0x74>)
 8000860:	f001 fba6 	bl	8001fb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800086a:	f000 f90b 	bl	8000a84 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_I2C1_Init+0x74>)
 8000872:	f001 fbd9 	bl	8002028 <HAL_I2CEx_ConfigDigitalFilter>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800087c:	f000 f902 	bl	8000a84 <Error_Handler>
  }

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20004984 	.word	0x20004984
 8000888:	40005400 	.word	0x40005400
 800088c:	000186a0 	.word	0x000186a0

08000890 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a19      	ldr	r2, [pc, #100]	; (8000914 <HAL_I2C_MspInit+0x84>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d12b      	bne.n	800090a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_I2C_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_I2C_MspInit+0x88>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_I2C_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ce:	23c0      	movs	r3, #192	; 0xc0
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d2:	2312      	movs	r3, #18
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008de:	2304      	movs	r3, #4
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <HAL_I2C_MspInit+0x8c>)
 80008ea:	f001 f87f 	bl	80019ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_I2C_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_I2C_MspInit+0x88>)
 80008f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_I2C_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40005400 	.word	0x40005400
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000924:	f000 faae 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000928:	f000 f812 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092c:	f7ff ff1e 	bl	800076c <MX_GPIO_Init>
  MX_ETH_Init();
 8000930:	f7ff fdde 	bl	80004f0 <MX_ETH_Init>
  MX_I2C1_Init();
 8000934:	f7ff ff6c 	bl	8000810 <MX_I2C1_Init>
  MX_RTC_Init();
 8000938:	f000 f8ac 	bl	8000a94 <MX_RTC_Init>
  MX_SPI1_Init();
 800093c:	f000 f91a 	bl	8000b74 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000940:	f002 ff50 	bl	80037e4 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 8000944:	f7ff fee2 	bl	800070c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000948:	f002 ff80 	bl	800384c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094c:	e7fe      	b.n	800094c <main+0x2c>
	...

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a0      	sub	sp, #128	; 0x80
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fcab 	bl	80062ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2230      	movs	r2, #48	; 0x30
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f005 fc9c 	bl	80062ba <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <SystemClock_Config+0x108>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <SystemClock_Config+0x108>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <SystemClock_Config+0x108>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <SystemClock_Config+0x10c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a2d      	ldr	r2, [pc, #180]	; (8000a5c <SystemClock_Config+0x10c>)
 80009a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <SystemClock_Config+0x10c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009ba:	230a      	movs	r3, #10
 80009bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009be:	2301      	movs	r3, #1
 80009c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c2:	2310      	movs	r3, #16
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009c6:	2301      	movs	r3, #1
 80009c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ce:	2300      	movs	r3, #0
 80009d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d2:	2308      	movs	r3, #8
 80009d4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009d6:	23b4      	movs	r3, #180	; 0xb4
 80009d8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009de:	2304      	movs	r3, #4
 80009e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 fbae 	bl	8002148 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009f2:	f000 f847 	bl	8000a84 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f6:	f001 fb57 	bl	80020a8 <HAL_PWREx_EnableOverDrive>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a00:	f000 f840 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a20:	2105      	movs	r1, #5
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fe00 	bl	8002628 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000a2e:	f000 f829 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a32:	2320      	movs	r3, #32
 8000a34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f801 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000a4c:	f000 f81a 	bl	8000a84 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3780      	adds	r7, #128	; 0x80
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a72:	f000 fa29 	bl	8000ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40001400 	.word	0x40001400

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <MX_RTC_Init+0xac>)
 8000aae:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <MX_RTC_Init+0xb0>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_RTC_Init+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <MX_RTC_Init+0xac>)
 8000aba:	227f      	movs	r2, #127	; 0x7f
 8000abc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_RTC_Init+0xac>)
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_RTC_Init+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_RTC_Init+0xac>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_RTC_Init+0xac>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad6:	481a      	ldr	r0, [pc, #104]	; (8000b40 <MX_RTC_Init+0xac>)
 8000ad8:	f002 f974 	bl	8002dc4 <HAL_RTC_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f7ff ffcf 	bl	8000a84 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2201      	movs	r2, #1
 8000afe:	4619      	mov	r1, r3
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_RTC_Init+0xac>)
 8000b02:	f002 f9f0 	bl	8002ee6 <HAL_RTC_SetTime>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f7ff ffba 	bl	8000a84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b10:	2301      	movs	r3, #1
 8000b12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b14:	2301      	movs	r3, #1
 8000b16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b20:	463b      	mov	r3, r7
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_RTC_Init+0xac>)
 8000b28:	f002 fa9a 	bl	8003060 <HAL_RTC_SetDate>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b32:	f7ff ffa7 	bl	8000a84 <Error_Handler>
  }

}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200049d8 	.word	0x200049d8
 8000b44:	40002800 	.word	0x40002800

08000b48 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <HAL_RTC_MspInit+0x24>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d102      	bne.n	8000b60 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_RTC_MspInit+0x28>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40002800 	.word	0x40002800
 8000b70:	42470e3c 	.word	0x42470e3c

08000b74 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <MX_SPI1_Init+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_SPI1_Init+0x64>)
 8000bc6:	f002 fb64 	bl	8003292 <HAL_SPI_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bd0:	f7ff ff58 	bl	8000a84 <Error_Handler>
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200049f8 	.word	0x200049f8
 8000bdc:	40013000 	.word	0x40013000

08000be0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_SPI_MspInit+0xc0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d149      	bne.n	8000c96 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <HAL_SPI_MspInit+0xc4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c56:	2360      	movs	r3, #96	; 0x60
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <HAL_SPI_MspInit+0xc8>)
 8000c72:	f000 febb 	bl	80019ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c76:	2320      	movs	r3, #32
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c86:	2305      	movs	r3, #5
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <HAL_SPI_MspInit+0xcc>)
 8000c92:	f000 feab 	bl	80019ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	; 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40013000 	.word	0x40013000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020400 	.word	0x40020400

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_MspInit+0x54>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <HAL_MspInit+0x54>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x54>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_MspInit+0x54>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_MspInit+0x54>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_MspInit+0x54>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	f06f 0001 	mvn.w	r0, #1
 8000cf6:	f000 f9e1 	bl	80010bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	; 0x30
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2037      	movs	r0, #55	; 0x37
 8000d1e:	f000 f9cd 	bl	80010bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8000d22:	2037      	movs	r0, #55	; 0x37
 8000d24:	f000 f9e6 	bl	80010f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <HAL_InitTick+0xa4>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <HAL_InitTick+0xa4>)
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_InitTick+0xa4>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d44:	f107 0210 	add.w	r2, r7, #16
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fe48 	bl	80029e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d54:	f001 fe32 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <HAL_InitTick+0xa8>)
 8000d62:	fba2 2303 	umull	r2, r3, r2, r3
 8000d66:	0c9b      	lsrs	r3, r3, #18
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_InitTick+0xac>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <HAL_InitTick+0xb0>)
 8000d70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_InitTick+0xac>)
 8000d74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d78:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_InitTick+0xac>)
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_InitTick+0xac>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_InitTick+0xac>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <HAL_InitTick+0xac>)
 8000d8e:	f002 fae4 	bl	800335a <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <HAL_InitTick+0xac>)
 8000d9a:	f002 fb13 	bl	80033c4 <HAL_TIM_Base_Start_IT>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3730      	adds	r7, #48	; 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	20004a50 	.word	0x20004a50
 8000db8:	40001400 	.word	0x40001400

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM7_IRQHandler+0x10>)
 8000df6:	f002 fb09 	bl	800340c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20004a50 	.word	0x20004a50

08000e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <SystemInit+0x28>)
 8000e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <SystemInit+0x28>)
 8000e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SystemInit+0x28>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e36:	e003      	b.n	8000e40 <LoopCopyDataInit>

08000e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e3e:	3104      	adds	r1, #4

08000e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e48:	d3f6      	bcc.n	8000e38 <CopyDataInit>
  ldr  r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e4c:	e002      	b.n	8000e54 <LoopFillZerobss>

08000e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e50:	f842 3b04 	str.w	r3, [r2], #4

08000e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e58:	d3f9      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5a:	f7ff ffd3 	bl	8000e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f005 f9fd 	bl	800625c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fd5d 	bl	8000920 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e68:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e6c:	08006384 	.word	0x08006384
  ldr  r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e74:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e78:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e7c:	20004ad4 	.word	0x20004ad4

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f8fa 	bl	80010a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff ff28 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fefa 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20004a90 	.word	0x20004a90

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20004a90 	.word	0x20004a90

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_Delay+0x40>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff4c 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ce:	f7ff ff61 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff ffb1 	bl	8001040 <NVIC_EncodePriority>
 80010de:	4602      	mov	r2, r0
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff80 	bl	8000fec <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff54 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001120:	4baa      	ldr	r3, [pc, #680]	; (80013cc <HAL_ETH_Init+0x2bc>)
 8001122:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e185      	b.n	8001442 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d106      	bne.n	8001150 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fa18 	bl	8000580 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b9e      	ldr	r3, [pc, #632]	; (80013d0 <HAL_ETH_Init+0x2c0>)
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	4a9d      	ldr	r2, [pc, #628]	; (80013d0 <HAL_ETH_Init+0x2c0>)
 800115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115e:	6453      	str	r3, [r2, #68]	; 0x44
 8001160:	4b9b      	ldr	r3, [pc, #620]	; (80013d0 <HAL_ETH_Init+0x2c0>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800116c:	4b99      	ldr	r3, [pc, #612]	; (80013d4 <HAL_ETH_Init+0x2c4>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a98      	ldr	r2, [pc, #608]	; (80013d4 <HAL_ETH_Init+0x2c4>)
 8001172:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001176:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001178:	4b96      	ldr	r3, [pc, #600]	; (80013d4 <HAL_ETH_Init+0x2c4>)
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4994      	ldr	r1, [pc, #592]	; (80013d4 <HAL_ETH_Init+0x2c4>)
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 0201 	orr.w	r2, r2, #1
 8001198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800119e:	f7ff fea7 	bl	8000ef0 <HAL_GetTick>
 80011a2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011a4:	e011      	b.n	80011ca <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011a6:	f7ff fea3 	bl	8000ef0 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011b4:	d909      	bls.n	80011ca <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2203      	movs	r2, #3
 80011ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e13b      	b.n	8001442 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e4      	bne.n	80011a6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f023 031c 	bic.w	r3, r3, #28
 80011ea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011ec:	f001 fbda 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80011f0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <HAL_ETH_Init+0x2c8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d908      	bls.n	800120c <HAL_ETH_Init+0xfc>
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_ETH_Init+0x2cc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d804      	bhi.n	800120c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e027      	b.n	800125c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	4a73      	ldr	r2, [pc, #460]	; (80013dc <HAL_ETH_Init+0x2cc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d908      	bls.n	8001226 <HAL_ETH_Init+0x116>
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <HAL_ETH_Init+0x2d0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d804      	bhi.n	8001226 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f043 030c 	orr.w	r3, r3, #12
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	e01a      	b.n	800125c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <HAL_ETH_Init+0x2d0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d903      	bls.n	8001236 <HAL_ETH_Init+0x126>
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4a6c      	ldr	r2, [pc, #432]	; (80013e4 <HAL_ETH_Init+0x2d4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d911      	bls.n	800125a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4a6a      	ldr	r2, [pc, #424]	; (80013e4 <HAL_ETH_Init+0x2d4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d908      	bls.n	8001250 <HAL_ETH_Init+0x140>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4a69      	ldr	r2, [pc, #420]	; (80013e8 <HAL_ETH_Init+0x2d8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d804      	bhi.n	8001250 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e005      	b.n	800125c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	e000      	b.n	800125c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800125a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001264:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001268:	2100      	movs	r1, #0
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f956 	bl	800151c <HAL_ETH_WritePHYRegister>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800127a:	6939      	ldr	r1, [r7, #16]
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f9b3 	bl	80015e8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0d9      	b.n	8001442 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800128e:	20ff      	movs	r0, #255	; 0xff
 8001290:	f7ff fe3a 	bl	8000f08 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80a7 	beq.w	80013ec <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800129e:	f7ff fe27 	bl	8000ef0 <HAL_GetTick>
 80012a2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	461a      	mov	r2, r3
 80012aa:	2101      	movs	r1, #1
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8cd 	bl	800144c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012b2:	f7ff fe1d 	bl	8000ef0 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d90f      	bls.n	80012e4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012c8:	6939      	ldr	r1, [r7, #16]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f98c 	bl	80015e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e0ae      	b.n	8001442 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0da      	beq.n	80012a4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f2:	2100      	movs	r1, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f911 	bl	800151c <HAL_ETH_WritePHYRegister>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001304:	6939      	ldr	r1, [r7, #16]
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f96e 	bl	80015e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001314:	2301      	movs	r3, #1
 8001316:	e094      	b.n	8001442 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001318:	f7ff fdea 	bl	8000ef0 <HAL_GetTick>
 800131c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	461a      	mov	r2, r3
 8001324:	2101      	movs	r1, #1
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f890 	bl	800144c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800132c:	f7ff fde0 	bl	8000ef0 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d90f      	bls.n	800135e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001342:	6939      	ldr	r1, [r7, #16]
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f94f 	bl	80015e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e071      	b.n	8001442 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0da      	beq.n	800131e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	461a      	mov	r2, r3
 800136e:	211f      	movs	r1, #31
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f86b 	bl	800144c <HAL_ETH_ReadPHYRegister>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00b      	beq.n	8001394 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001380:	6939      	ldr	r1, [r7, #16]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f930 	bl	80015e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001390:	2301      	movs	r3, #1
 8001392:	e056      	b.n	8001442 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	e002      	b.n	80013ae <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	e037      	b.n	8001430 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	e032      	b.n	8001430 <HAL_ETH_Init+0x320>
 80013ca:	bf00      	nop
 80013cc:	03938700 	.word	0x03938700
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	01312cff 	.word	0x01312cff
 80013dc:	02160ebf 	.word	0x02160ebf
 80013e0:	039386ff 	.word	0x039386ff
 80013e4:	05f5e0ff 	.word	0x05f5e0ff
 80013e8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f889 	bl	800151c <HAL_ETH_WritePHYRegister>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f8e6 	bl	80015e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e00c      	b.n	8001442 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001428:	f640 70ff 	movw	r0, #4095	; 0xfff
 800142c:	f7ff fd6c 	bl	8000f08 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001430:	6939      	ldr	r1, [r7, #16]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f8d8 	bl	80015e8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3720      	adds	r7, #32
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop

0800144c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	460b      	mov	r3, r1
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b82      	cmp	r3, #130	; 0x82
 800146c:	d101      	bne.n	8001472 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800146e:	2302      	movs	r3, #2
 8001470:	e050      	b.n	8001514 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2282      	movs	r2, #130	; 0x82
 8001476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 031c 	and.w	r3, r3, #28
 8001488:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8a1b      	ldrh	r3, [r3, #16]
 800148e:	02db      	lsls	r3, r3, #11
 8001490:	b29b      	uxth	r3, r3
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	4313      	orrs	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001498:	897b      	ldrh	r3, [r7, #10]
 800149a:	019b      	lsls	r3, r3, #6
 800149c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f023 0302 	bic.w	r3, r3, #2
 80014ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014be:	f7ff fd17 	bl	8000ef0 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014c4:	e015      	b.n	80014f2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80014c6:	f7ff fd13 	bl	8000ef0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d309      	bcc.n	80014ea <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e014      	b.n	8001514 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e4      	bne.n	80014c6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	b29b      	uxth	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	460b      	mov	r3, r1
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b42      	cmp	r3, #66	; 0x42
 800153c:	d101      	bne.n	8001542 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800153e:	2302      	movs	r3, #2
 8001540:	e04e      	b.n	80015e0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2242      	movs	r2, #66	; 0x42
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f003 031c 	and.w	r3, r3, #28
 8001558:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8a1b      	ldrh	r3, [r3, #16]
 800155e:	02db      	lsls	r3, r3, #11
 8001560:	b29b      	uxth	r3, r3
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4313      	orrs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	4313      	orrs	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001598:	f7ff fcaa 	bl	8000ef0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800159e:	e015      	b.n	80015cc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80015a0:	f7ff fca6 	bl	8000ef0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ae:	d309      	bcc.n	80015c4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e00d      	b.n	80015e0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1e4      	bne.n	80015a0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0b0      	sub	sp, #192	; 0xc0
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001604:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001616:	2300      	movs	r3, #0
 8001618:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800162e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001632:	663b      	str	r3, [r7, #96]	; 0x60
 8001634:	e001      	b.n	800163a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800163a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001644:	2300      	movs	r3, #0
 8001646:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001654:	2340      	movs	r3, #64	; 0x40
 8001656:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016c0:	4bac      	ldr	r3, [pc, #688]	; (8001974 <ETH_MACDMAConfig+0x38c>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80016c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80016ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80016cc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80016ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80016d0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80016d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80016d4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80016da:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80016dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80016de:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80016e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80016e2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80016e8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80016ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80016ec:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80016ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80016f0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80016f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80016f4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80016f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80016f8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80016fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80016fc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80016fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001702:	4313      	orrs	r3, r2
 8001704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001710:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fbf3 	bl	8000f08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800172a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800172c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800172e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001730:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001734:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001736:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800173a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800173c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001740:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001742:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001746:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800174c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001750:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001758:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800175a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001766:	2001      	movs	r0, #1
 8001768:	f7ff fbce 	bl	8000f08 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001774:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800177e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001788:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001794:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001798:	f64f 7341 	movw	r3, #65345	; 0xff41
 800179c:	4013      	ands	r3, r2
 800179e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017a6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80017a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017ac:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80017ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80017b2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80017b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80017b8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80017ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80017be:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80017c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80017c4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017ca:	4313      	orrs	r3, r2
 80017cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff fb8f 	bl	8000f08 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017f2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80017f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80017f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff fb7a 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800181c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001826:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800182c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001830:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001842:	2304      	movs	r3, #4
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800184c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001862:	2300      	movs	r3, #0
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001866:	2300      	movs	r3, #0
 8001868:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001872:	3318      	adds	r3, #24
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800187a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <ETH_MACDMAConfig+0x390>)
 8001880:	4013      	ands	r3, r2
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001886:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001888:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800188a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800188c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800188e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001890:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001892:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001894:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001896:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001898:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800189a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800189c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800189e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80018a2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80018a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80018a6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018ac:	4313      	orrs	r3, r2
 80018ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ba:	3318      	adds	r3, #24
 80018bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018c0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ca:	3318      	adds	r3, #24
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff fb18 	bl	8000f08 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e0:	3318      	adds	r3, #24
 80018e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018e6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80018e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80018ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80018ec:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80018f0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80018f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80018f4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80018f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80018f8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80018fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80018fe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001902:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800190c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001910:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001920:	2001      	movs	r0, #1
 8001922:	f7ff faf1 	bl	8000f08 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001932:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10f      	bne.n	800195c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001944:	331c      	adds	r3, #28
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	331c      	adds	r3, #28
 800195a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	461a      	mov	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f809 	bl	800197c <ETH_MACAddressConfig>
}
 800196a:	bf00      	nop
 800196c:	37c0      	adds	r7, #192	; 0xc0
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	ff20810f 	.word	0xff20810f
 8001978:	f8de3f23 	.word	0xf8de3f23

0800197c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3305      	adds	r3, #5
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	3204      	adds	r2, #4
 8001994:	7812      	ldrb	r2, [r2, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <ETH_MACAddressConfig+0x68>)
 800199e:	4413      	add	r3, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3303      	adds	r3, #3
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	061a      	lsls	r2, r3, #24
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3302      	adds	r3, #2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	4313      	orrs	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <ETH_MACAddressConfig+0x6c>)
 80019ce:	4413      	add	r3, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	6013      	str	r3, [r2, #0]
}
 80019d6:	bf00      	nop
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40028040 	.word	0x40028040
 80019e8:	40028044 	.word	0x40028044

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e177      	b.n	8001cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8166 	bne.w	8001cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d00b      	beq.n	8001a46 <HAL_GPIO_Init+0x5a>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3a:	2b11      	cmp	r3, #17
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0xfc>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80c0 	beq.w	8001cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b65      	ldr	r3, [pc, #404]	; (8001d0c <HAL_GPIO_Init+0x320>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a64      	ldr	r2, [pc, #400]	; (8001d0c <HAL_GPIO_Init+0x320>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b62      	ldr	r3, [pc, #392]	; (8001d0c <HAL_GPIO_Init+0x320>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8e:	4a60      	ldr	r2, [pc, #384]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a57      	ldr	r2, [pc, #348]	; (8001d14 <HAL_GPIO_Init+0x328>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d037      	beq.n	8001c2a <HAL_GPIO_Init+0x23e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a56      	ldr	r2, [pc, #344]	; (8001d18 <HAL_GPIO_Init+0x32c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d031      	beq.n	8001c26 <HAL_GPIO_Init+0x23a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a55      	ldr	r2, [pc, #340]	; (8001d1c <HAL_GPIO_Init+0x330>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02b      	beq.n	8001c22 <HAL_GPIO_Init+0x236>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a54      	ldr	r2, [pc, #336]	; (8001d20 <HAL_GPIO_Init+0x334>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d025      	beq.n	8001c1e <HAL_GPIO_Init+0x232>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a53      	ldr	r2, [pc, #332]	; (8001d24 <HAL_GPIO_Init+0x338>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <HAL_GPIO_Init+0x22e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a52      	ldr	r2, [pc, #328]	; (8001d28 <HAL_GPIO_Init+0x33c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x22a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_GPIO_Init+0x340>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a50      	ldr	r2, [pc, #320]	; (8001d30 <HAL_GPIO_Init+0x344>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <HAL_GPIO_Init+0x348>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4e      	ldr	r2, [pc, #312]	; (8001d38 <HAL_GPIO_Init+0x34c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x21a>
 8001c02:	2309      	movs	r3, #9
 8001c04:	e012      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c06:	230a      	movs	r3, #10
 8001c08:	e010      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0e:	2307      	movs	r3, #7
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4934      	ldr	r1, [pc, #208]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6e:	4a33      	ldr	r2, [pc, #204]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c98:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae84 	bls.w	8001a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	3724      	adds	r7, #36	; 0x24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40013800 	.word	0x40013800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021400 	.word	0x40021400
 8001d2c:	40021800 	.word	0x40021800
 8001d30:	40021c00 	.word	0x40021c00
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40022400 	.word	0x40022400
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e11f      	b.n	8001f92 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fd92 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da4:	f000 fe0a 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a7b      	ldr	r2, [pc, #492]	; (8001f9c <HAL_I2C_Init+0x25c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d807      	bhi.n	8001dc4 <HAL_I2C_Init+0x84>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a7a      	ldr	r2, [pc, #488]	; (8001fa0 <HAL_I2C_Init+0x260>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e006      	b.n	8001dd2 <HAL_I2C_Init+0x92>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a77      	ldr	r2, [pc, #476]	; (8001fa4 <HAL_I2C_Init+0x264>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0db      	b.n	8001f92 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a72      	ldr	r2, [pc, #456]	; (8001fa8 <HAL_I2C_Init+0x268>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a64      	ldr	r2, [pc, #400]	; (8001f9c <HAL_I2C_Init+0x25c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d802      	bhi.n	8001e14 <HAL_I2C_Init+0xd4>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	e009      	b.n	8001e28 <HAL_I2C_Init+0xe8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	4a63      	ldr	r2, [pc, #396]	; (8001fac <HAL_I2C_Init+0x26c>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4956      	ldr	r1, [pc, #344]	; (8001f9c <HAL_I2C_Init+0x25c>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d80d      	bhi.n	8001e64 <HAL_I2C_Init+0x124>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	bf38      	it	cc
 8001e60:	2304      	movcc	r3, #4
 8001e62:	e04f      	b.n	8001f04 <HAL_I2C_Init+0x1c4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <HAL_I2C_Init+0x150>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	bf0c      	ite	eq
 8001e88:	2301      	moveq	r3, #1
 8001e8a:	2300      	movne	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e012      	b.n	8001eb6 <HAL_I2C_Init+0x176>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1e58      	subs	r0, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	0099      	lsls	r1, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Init+0x17e>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e022      	b.n	8001f04 <HAL_I2C_Init+0x1c4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_I2C_Init+0x1a4>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1e58      	subs	r0, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	440b      	add	r3, r1
 8001ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Init+0x1c4>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	6809      	ldr	r1, [r1, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69da      	ldr	r2, [r3, #28]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6911      	ldr	r1, [r2, #16]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68d2      	ldr	r2, [r2, #12]
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	000186a0 	.word	0x000186a0
 8001fa0:	001e847f 	.word	0x001e847f
 8001fa4:	003d08ff 	.word	0x003d08ff
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d129      	bne.n	800201a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2224      	movs	r2, #36	; 0x24
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0210 	bic.w	r2, r2, #16
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	e000      	b.n	800201c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800201a:	2302      	movs	r3, #2
  }
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b20      	cmp	r3, #32
 8002040:	d12a      	bne.n	8002098 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2224      	movs	r2, #36	; 0x24
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002062:	89fb      	ldrh	r3, [r7, #14]
 8002064:	f023 030f 	bic.w	r3, r3, #15
 8002068:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	b29a      	uxth	r2, r3
 800206e:	89fb      	ldrh	r3, [r7, #14]
 8002070:	4313      	orrs	r3, r2
 8002072:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	89fa      	ldrh	r2, [r7, #14]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002098:	2302      	movs	r3, #2
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_PWREx_EnableOverDrive+0x90>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_PWREx_EnableOverDrive+0x90>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_PWREx_EnableOverDrive+0x90>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_PWREx_EnableOverDrive+0x94>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d4:	f7fe ff0c 	bl	8000ef0 <HAL_GetTick>
 80020d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020da:	e009      	b.n	80020f0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020dc:	f7fe ff08 	bl	8000ef0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ea:	d901      	bls.n	80020f0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e01f      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_PWREx_EnableOverDrive+0x98>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fc:	d1ee      	bne.n	80020dc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002104:	f7fe fef4 	bl	8000ef0 <HAL_GetTick>
 8002108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800210a:	e009      	b.n	8002120 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800210c:	f7fe fef0 	bl	8000ef0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800211a:	d901      	bls.n	8002120 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e007      	b.n	8002130 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_PWREx_EnableOverDrive+0x98>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800212c:	d1ee      	bne.n	800210c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	420e0040 	.word	0x420e0040
 8002140:	40007000 	.word	0x40007000
 8002144:	420e0044 	.word	0x420e0044

08002148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e25b      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d075      	beq.n	8002252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002166:	4ba3      	ldr	r3, [pc, #652]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d00c      	beq.n	800218c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800217a:	2b08      	cmp	r3, #8
 800217c:	d112      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217e:	4b9d      	ldr	r3, [pc, #628]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218a:	d10b      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	4b99      	ldr	r3, [pc, #612]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d05b      	beq.n	8002250 <HAL_RCC_OscConfig+0x108>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d157      	bne.n	8002250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e236      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d106      	bne.n	80021bc <HAL_RCC_OscConfig+0x74>
 80021ae:	4b91      	ldr	r3, [pc, #580]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a90      	ldr	r2, [pc, #576]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e01d      	b.n	80021f8 <HAL_RCC_OscConfig+0xb0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c4:	d10c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x98>
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8a      	ldr	r2, [pc, #552]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a87      	ldr	r2, [pc, #540]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e00b      	b.n	80021f8 <HAL_RCC_OscConfig+0xb0>
 80021e0:	4b84      	ldr	r3, [pc, #528]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a83      	ldr	r2, [pc, #524]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a80      	ldr	r2, [pc, #512]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80021f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fe76 	bl	8000ef0 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7fe fe72 	bl	8000ef0 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1fb      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0xc0>
 8002226:	e014      	b.n	8002252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fe62 	bl	8000ef0 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002230:	f7fe fe5e 	bl	8000ef0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1e7      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0xe8>
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d063      	beq.n	8002326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225e:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226a:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002272:	2b08      	cmp	r3, #8
 8002274:	d11c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d116      	bne.n	80022b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_RCC_OscConfig+0x152>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e1bb      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4952      	ldr	r1, [pc, #328]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ae:	e03a      	b.n	8002326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b8:	4b4f      	ldr	r3, [pc, #316]	; (80023f8 <HAL_RCC_OscConfig+0x2b0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe fe17 	bl	8000ef0 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c6:	f7fe fe13 	bl	8000ef0 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e19c      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d8:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	4940      	ldr	r1, [pc, #256]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
 80022f8:	e015      	b.n	8002326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCC_OscConfig+0x2b0>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fdf6 	bl	8000ef0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002308:	f7fe fdf2 	bl	8000ef0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e17b      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d030      	beq.n	8002394 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d016      	beq.n	8002368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233a:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_RCC_OscConfig+0x2b4>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7fe fdd6 	bl	8000ef0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fdd2 	bl	8000ef0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e15b      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x200>
 8002366:	e015      	b.n	8002394 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_OscConfig+0x2b4>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7fe fdbf 	bl	8000ef0 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002376:	f7fe fdbb 	bl	8000ef0 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e144      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80a0 	beq.w	80024e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_OscConfig+0x2b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d121      	bne.n	8002422 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_RCC_OscConfig+0x2b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_RCC_OscConfig+0x2b8>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fd81 	bl	8000ef0 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e011      	b.n	8002416 <HAL_RCC_OscConfig+0x2ce>
 80023f2:	bf00      	nop
 80023f4:	40023800 	.word	0x40023800
 80023f8:	42470000 	.word	0x42470000
 80023fc:	42470e80 	.word	0x42470e80
 8002400:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7fe fd74 	bl	8000ef0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e0fd      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b81      	ldr	r3, [pc, #516]	; (800261c <HAL_RCC_OscConfig+0x4d4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x2f0>
 800242a:	4b7d      	ldr	r3, [pc, #500]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a7c      	ldr	r2, [pc, #496]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	e01c      	b.n	8002472 <HAL_RCC_OscConfig+0x32a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x312>
 8002440:	4b77      	ldr	r3, [pc, #476]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a76      	ldr	r2, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	4b74      	ldr	r3, [pc, #464]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a73      	ldr	r2, [pc, #460]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
 8002458:	e00b      	b.n	8002472 <HAL_RCC_OscConfig+0x32a>
 800245a:	4b71      	ldr	r3, [pc, #452]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	4a70      	ldr	r2, [pc, #448]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6713      	str	r3, [r2, #112]	; 0x70
 8002466:	4b6e      	ldr	r3, [pc, #440]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	4a6d      	ldr	r2, [pc, #436]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d015      	beq.n	80024a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe fd39 	bl	8000ef0 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe fd35 	bl	8000ef0 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0bc      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	4b61      	ldr	r3, [pc, #388]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ee      	beq.n	8002482 <HAL_RCC_OscConfig+0x33a>
 80024a4:	e014      	b.n	80024d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fd23 	bl	8000ef0 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fd1f 	bl	8000ef0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0a6      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ee      	bne.n	80024ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b52      	ldr	r3, [pc, #328]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a51      	ldr	r2, [pc, #324]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8092 	beq.w	8002610 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ec:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d05c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d141      	bne.n	8002584 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fcf3 	bl	8000ef0 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fcef 	bl	8000ef0 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e078      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002520:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	019b      	lsls	r3, r3, #6
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	3b01      	subs	r3, #1
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	061b      	lsls	r3, r3, #24
 8002550:	4933      	ldr	r1, [pc, #204]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fcc8 	bl	8000ef0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fcc4 	bl	8000ef0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e04d      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x41c>
 8002582:	e045      	b.n	8002610 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_OscConfig+0x4dc>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fcb1 	bl	8000ef0 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe fcad 	bl	8000ef0 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e036      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x44a>
 80025b0:	e02e      	b.n	8002610 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e029      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCC_OscConfig+0x4d8>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d115      	bne.n	800260c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e6:	4013      	ands	r3, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d10d      	bne.n	800260c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40007000 	.word	0x40007000
 8002620:	40023800 	.word	0x40023800
 8002624:	42470060 	.word	0x42470060

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0cc      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d90c      	bls.n	8002664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b8      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a58      	ldr	r2, [pc, #352]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a52      	ldr	r2, [pc, #328]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800269e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494d      	ldr	r1, [pc, #308]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d044      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e067      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4934      	ldr	r1, [pc, #208]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe fbea 	bl	8000ef0 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe fbe6 	bl	8000ef0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	; 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d20c      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e032      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4916      	ldr	r1, [pc, #88]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490e      	ldr	r1, [pc, #56]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 f821 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80027b2:	4601      	mov	r1, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	fa21 f303 	lsr.w	r3, r1, r3
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fa9a 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00
 80027e4:	40023800 	.word	0x40023800
 80027e8:	0800635c 	.word	0x0800635c
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000004 	.word	0x20000004

080027f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d007      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x32>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d008      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x38>
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80b4 	bne.w	8002988 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002822:	60bb      	str	r3, [r7, #8]
       break;
 8002824:	e0b3      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002826:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002828:	60bb      	str	r3, [r7, #8]
      break;
 800282a:	e0b0      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b5a      	ldr	r3, [pc, #360]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002834:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d04a      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002842:	4b55      	ldr	r3, [pc, #340]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	f04f 0400 	mov.w	r4, #0
 800284c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	ea03 0501 	and.w	r5, r3, r1
 8002858:	ea04 0602 	and.w	r6, r4, r2
 800285c:	4629      	mov	r1, r5
 800285e:	4632      	mov	r2, r6
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	f04f 0400 	mov.w	r4, #0
 8002868:	0154      	lsls	r4, r2, #5
 800286a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800286e:	014b      	lsls	r3, r1, #5
 8002870:	4619      	mov	r1, r3
 8002872:	4622      	mov	r2, r4
 8002874:	1b49      	subs	r1, r1, r5
 8002876:	eb62 0206 	sbc.w	r2, r2, r6
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f04f 0400 	mov.w	r4, #0
 8002882:	0194      	lsls	r4, r2, #6
 8002884:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002888:	018b      	lsls	r3, r1, #6
 800288a:	1a5b      	subs	r3, r3, r1
 800288c:	eb64 0402 	sbc.w	r4, r4, r2
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	00e2      	lsls	r2, r4, #3
 800289a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800289e:	00d9      	lsls	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	4614      	mov	r4, r2
 80028a4:	195b      	adds	r3, r3, r5
 80028a6:	eb44 0406 	adc.w	r4, r4, r6
 80028aa:	f04f 0100 	mov.w	r1, #0
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	0262      	lsls	r2, r4, #9
 80028b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028b8:	0259      	lsls	r1, r3, #9
 80028ba:	460b      	mov	r3, r1
 80028bc:	4614      	mov	r4, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	4621      	mov	r1, r4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	f7fd fc90 	bl	80001f0 <__aeabi_uldivmod>
 80028d0:	4603      	mov	r3, r0
 80028d2:	460c      	mov	r4, r1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e049      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	099b      	lsrs	r3, r3, #6
 80028de:	f04f 0400 	mov.w	r4, #0
 80028e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	ea03 0501 	and.w	r5, r3, r1
 80028ee:	ea04 0602 	and.w	r6, r4, r2
 80028f2:	4629      	mov	r1, r5
 80028f4:	4632      	mov	r2, r6
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	f04f 0400 	mov.w	r4, #0
 80028fe:	0154      	lsls	r4, r2, #5
 8002900:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002904:	014b      	lsls	r3, r1, #5
 8002906:	4619      	mov	r1, r3
 8002908:	4622      	mov	r2, r4
 800290a:	1b49      	subs	r1, r1, r5
 800290c:	eb62 0206 	sbc.w	r2, r2, r6
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	f04f 0400 	mov.w	r4, #0
 8002918:	0194      	lsls	r4, r2, #6
 800291a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	1a5b      	subs	r3, r3, r1
 8002922:	eb64 0402 	sbc.w	r4, r4, r2
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	00e2      	lsls	r2, r4, #3
 8002930:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002934:	00d9      	lsls	r1, r3, #3
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	195b      	adds	r3, r3, r5
 800293c:	eb44 0406 	adc.w	r4, r4, r6
 8002940:	f04f 0100 	mov.w	r1, #0
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	02a2      	lsls	r2, r4, #10
 800294a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800294e:	0299      	lsls	r1, r3, #10
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	4618      	mov	r0, r3
 8002956:	4621      	mov	r1, r4
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f04f 0400 	mov.w	r4, #0
 800295e:	461a      	mov	r2, r3
 8002960:	4623      	mov	r3, r4
 8002962:	f7fd fc45 	bl	80001f0 <__aeabi_uldivmod>
 8002966:	4603      	mov	r3, r0
 8002968:	460c      	mov	r4, r1
 800296a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	60bb      	str	r3, [r7, #8]
      break;
 8002986:	e002      	b.n	800298e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800298a:	60bb      	str	r3, [r7, #8]
      break;
 800298c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298e:	68bb      	ldr	r3, [r7, #8]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	00f42400 	.word	0x00f42400
 80029a0:	007a1200 	.word	0x007a1200

080029a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029aa:	681b      	ldr	r3, [r3, #0]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c0:	f7ff fff0 	bl	80029a4 <HAL_RCC_GetHCLKFreq>
 80029c4:	4601      	mov	r1, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0a9b      	lsrs	r3, r3, #10
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4a03      	ldr	r2, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40023800 	.word	0x40023800
 80029e0:	0800636c 	.word	0x0800636c

080029e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	220f      	movs	r2, #15
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_GetClockConfig+0x5c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_RCC_GetClockConfig+0x60>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 020f 	and.w	r2, r3, #15
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40023c00 	.word	0x40023c00

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d075      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a7c:	4bad      	ldr	r3, [pc, #692]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fa35 	bl	8000ef0 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a8a:	f7fe fa31 	bl	8000ef0 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e18b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a9c:	4ba6      	ldr	r3, [pc, #664]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	019a      	lsls	r2, r3, #6
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	071b      	lsls	r3, r3, #28
 8002ac0:	499d      	ldr	r1, [pc, #628]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01f      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ad4:	4b98      	ldr	r3, [pc, #608]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ada:	0f1b      	lsrs	r3, r3, #28
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	019a      	lsls	r2, r3, #6
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	431a      	orrs	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	071b      	lsls	r3, r3, #28
 8002af4:	4990      	ldr	r1, [pc, #576]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002afc:	4b8e      	ldr	r3, [pc, #568]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b02:	f023 021f 	bic.w	r2, r3, #31
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	498a      	ldr	r1, [pc, #552]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	019a      	lsls	r2, r3, #6
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	061b      	lsls	r3, r3, #24
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	071b      	lsls	r3, r3, #28
 8002b34:	4980      	ldr	r1, [pc, #512]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b3c:	4b7d      	ldr	r3, [pc, #500]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b42:	f7fe f9d5 	bl	8000ef0 <HAL_GetTick>
 8002b46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b4a:	f7fe f9d1 	bl	8000ef0 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e12b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b5c:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d079      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b80:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b86:	f7fe f9b3 	bl	8000ef0 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b8e:	f7fe f9af 	bl	8000ef0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e109      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba0:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bac:	d0ef      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d020      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002bba:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	0f1b      	lsrs	r3, r3, #28
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	019a      	lsls	r2, r3, #6
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	061b      	lsls	r3, r3, #24
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	071b      	lsls	r3, r3, #28
 8002bda:	4957      	ldr	r1, [pc, #348]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002be2:	4b55      	ldr	r3, [pc, #340]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	021b      	lsls	r3, r3, #8
 8002bf4:	4950      	ldr	r1, [pc, #320]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01e      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c08:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	0e1b      	lsrs	r3, r3, #24
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	019a      	lsls	r2, r3, #6
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	071b      	lsls	r3, r3, #28
 8002c28:	4943      	ldr	r1, [pc, #268]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	493e      	ldr	r1, [pc, #248]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c46:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe f950 	bl	8000ef0 <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c54:	f7fe f94c 	bl	8000ef0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e0a6      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c72:	d1ef      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 808d 	beq.w	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a27      	ldr	r2, [pc, #156]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002caa:	f7fe f921 	bl	8000ef0 <HAL_GetTick>
 8002cae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fe f91d 	bl	8000ef0 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e077      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d039      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d032      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d04:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d11e      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe f8eb 	bl	8000ef0 <HAL_GetTick>
 8002d1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	e014      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe f8e7 	bl	8000ef0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d90b      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e03f      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002d34:	42470068 	.word	0x42470068
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470070 	.word	0x42470070
 8002d40:	40007000 	.word	0x40007000
 8002d44:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0e4      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d60:	d10d      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d76:	4911      	ldr	r1, [pc, #68]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]
 8002d7c:	e005      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002d7e:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d88:	6093      	str	r3, [r2, #8]
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d96:	4909      	ldr	r1, [pc, #36]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002dae:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002db0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	424711e0 	.word	0x424711e0

08002dc4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e083      	b.n	8002ede <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7f5b      	ldrb	r3, [r3, #29]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd feae 	bl	8000b48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	22ca      	movs	r2, #202	; 0xca
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2253      	movs	r2, #83	; 0x53
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f9fb 	bl	80031fe <RTC_EnterInitMode>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e05e      	b.n	8002ede <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e32:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6899      	ldr	r1, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	041a      	lsls	r2, r3, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e7e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10e      	bne.n	8002eac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f98d 	bl	80031ae <HAL_RTC_WaitForSynchro>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	22ff      	movs	r2, #255	; 0xff
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e018      	b.n	8002ede <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	22ff      	movs	r2, #255	; 0xff
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002edc:	2300      	movs	r3, #0
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ee6:	b590      	push	{r4, r7, lr}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	7f1b      	ldrb	r3, [r3, #28]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_RTC_SetTime+0x1c>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0aa      	b.n	8003058 <HAL_RTC_SetTime+0x172>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d126      	bne.n	8002f62 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2200      	movs	r2, #0
 8002f26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f992 	bl	8003256 <RTC_ByteToBcd2>
 8002f32:	4603      	mov	r3, r0
 8002f34:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f98b 	bl	8003256 <RTC_ByteToBcd2>
 8002f40:	4603      	mov	r3, r0
 8002f42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f44:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	789b      	ldrb	r3, [r3, #2]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f983 	bl	8003256 <RTC_ByteToBcd2>
 8002f50:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002f52:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	78db      	ldrb	r3, [r3, #3]
 8002f5a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e018      	b.n	8002f94 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f82:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002f88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	78db      	ldrb	r3, [r3, #3]
 8002f8e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	22ca      	movs	r2, #202	; 0xca
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2253      	movs	r2, #83	; 0x53
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 f92a 	bl	80031fe <RTC_EnterInitMode>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00b      	beq.n	8002fc8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e047      	b.n	8003058 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002fd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002fd6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fe6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b00      	cmp	r3, #0
 800301c:	d111      	bne.n	8003042 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8c5 	bl	80031ae <HAL_RTC_WaitForSynchro>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	22ff      	movs	r2, #255	; 0xff
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2204      	movs	r2, #4
 8003036:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e00a      	b.n	8003058 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	22ff      	movs	r2, #255	; 0xff
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003056:	2300      	movs	r3, #0
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bd90      	pop	{r4, r7, pc}

08003060 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	7f1b      	ldrb	r3, [r3, #28]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_RTC_SetDate+0x1c>
 8003078:	2302      	movs	r3, #2
 800307a:	e094      	b.n	80031a6 <HAL_RTC_SetDate+0x146>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2202      	movs	r2, #2
 8003086:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10e      	bne.n	80030ac <HAL_RTC_SetDate+0x4c>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	785b      	ldrb	r3, [r3, #1]
 800309e:	f023 0310 	bic.w	r3, r3, #16
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	330a      	adds	r3, #10
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11c      	bne.n	80030ec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f8cd 	bl	8003256 <RTC_ByteToBcd2>
 80030bc:	4603      	mov	r3, r0
 80030be:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 f8c6 	bl	8003256 <RTC_ByteToBcd2>
 80030ca:	4603      	mov	r3, r0
 80030cc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030ce:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	789b      	ldrb	r3, [r3, #2]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f8be 	bl	8003256 <RTC_ByteToBcd2>
 80030da:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80030dc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e00e      	b.n	800310a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	78db      	ldrb	r3, [r3, #3]
 80030f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80030fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	22ca      	movs	r2, #202	; 0xca
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2253      	movs	r2, #83	; 0x53
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f86f 	bl	80031fe <RTC_EnterInitMode>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	22ff      	movs	r2, #255	; 0xff
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2204      	movs	r2, #4
 8003132:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e033      	b.n	80031a6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003148:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800314c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d111      	bne.n	8003190 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f81e 	bl	80031ae <HAL_RTC_WaitForSynchro>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	22ff      	movs	r2, #255	; 0xff
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2204      	movs	r2, #4
 8003184:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e00a      	b.n	80031a6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	22ff      	movs	r2, #255	; 0xff
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}

080031ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ca:	f7fd fe91 	bl	8000ef0 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031d0:	e009      	b.n	80031e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031d2:	f7fd fe8d 	bl	8000ef0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e0:	d901      	bls.n	80031e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e007      	b.n	80031f6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ee      	beq.n	80031d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d119      	bne.n	800324c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003220:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003222:	f7fd fe65 	bl	8000ef0 <HAL_GetTick>
 8003226:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003228:	e009      	b.n	800323e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800322a:	f7fd fe61 	bl	8000ef0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003238:	d901      	bls.n	800323e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e007      	b.n	800324e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003264:	e005      	b.n	8003272 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3301      	adds	r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	3b0a      	subs	r3, #10
 8003270:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	2b09      	cmp	r3, #9
 8003276:	d8f6      	bhi.n	8003266 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	b2da      	uxtb	r2, r3
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	4313      	orrs	r3, r2
 8003284:	b2db      	uxtb	r3, r3
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e056      	b.n	8003352 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fc8e 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	ea42 0103 	orr.w	r1, r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0104 	and.w	r1, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003340:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e01d      	b.n	80033a8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f815 	bl	80033b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4610      	mov	r0, r2
 800339a:	f000 f967 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d007      	beq.n	80033fe <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0202 	mvn.w	r2, #2
 8003438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8ee 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8e0 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8f1 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0204 	mvn.w	r2, #4
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8c4 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8b6 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f8c7 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0208 	mvn.w	r2, #8
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2204      	movs	r2, #4
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f89a 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f88c 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f89d 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	2b10      	cmp	r3, #16
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0210 	mvn.w	r2, #16
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2208      	movs	r2, #8
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f870 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f862 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f873 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0201 	mvn.w	r2, #1
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fa68 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f902 	bl	80037c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f838 	bl	8003658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0320 	and.w	r3, r3, #32
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0220 	mvn.w	r2, #32
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8cc 	bl	80037ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a40      	ldr	r2, [pc, #256]	; (8003780 <TIM_Base_SetConfig+0x114>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <TIM_Base_SetConfig+0x118>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a3b      	ldr	r2, [pc, #236]	; (800378c <TIM_Base_SetConfig+0x120>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <TIM_Base_SetConfig+0x124>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <TIM_Base_SetConfig+0x114>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d027      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <TIM_Base_SetConfig+0x118>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d023      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a2b      	ldr	r2, [pc, #172]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <TIM_Base_SetConfig+0x120>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <TIM_Base_SetConfig+0x124>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a28      	ldr	r2, [pc, #160]	; (8003794 <TIM_Base_SetConfig+0x128>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <TIM_Base_SetConfig+0x12c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <TIM_Base_SetConfig+0x130>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <TIM_Base_SetConfig+0x134>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <TIM_Base_SetConfig+0x138>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <TIM_Base_SetConfig+0x13c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <TIM_Base_SetConfig+0x114>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <TIM_Base_SetConfig+0x124>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40010400 	.word	0x40010400
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800
 80037a0:	40001800 	.word	0x40001800
 80037a4:	40001c00 	.word	0x40001c00
 80037a8:	40002000 	.word	0x40002000

080037ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ea:	f3ef 8305 	mrs	r3, IPSR
 80037ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f6:	f3ef 8310 	mrs	r3, PRIMASK
 80037fa:	607b      	str	r3, [r7, #4]
  return(result);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d105      	bne.n	800380e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003802:	f3ef 8311 	mrs	r3, BASEPRI
 8003806:	603b      	str	r3, [r7, #0]
  return(result);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <osKernelInitialize+0x3a>
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <osKernelInitialize+0x64>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d103      	bne.n	800381e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003816:	f06f 0305 	mvn.w	r3, #5
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e00c      	b.n	8003838 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <osKernelInitialize+0x64>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <osKernelInitialize+0x64>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e002      	b.n	8003838 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003836:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003838:	68fb      	ldr	r3, [r7, #12]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	2000002c 	.word	0x2000002c

0800384c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003852:	f3ef 8305 	mrs	r3, IPSR
 8003856:	60bb      	str	r3, [r7, #8]
  return(result);
 8003858:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385e:	f3ef 8310 	mrs	r3, PRIMASK
 8003862:	607b      	str	r3, [r7, #4]
  return(result);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800386a:	f3ef 8311 	mrs	r3, BASEPRI
 800386e:	603b      	str	r3, [r7, #0]
  return(result);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <osKernelStart+0x3a>
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <osKernelStart+0x68>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d103      	bne.n	8003886 <osKernelStart+0x3a>
    stat = osErrorISR;
 800387e:	f06f 0305 	mvn.w	r3, #5
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e010      	b.n	80038a8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <osKernelStart+0x68>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d109      	bne.n	80038a2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800388e:	f7ff ffa1 	bl	80037d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <osKernelStart+0x68>)
 8003894:	2202      	movs	r2, #2
 8003896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003898:	f001 f870 	bl	800497c <vTaskStartScheduler>
      stat = osOK;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e002      	b.n	80038a8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80038a8:	68fb      	ldr	r3, [r7, #12]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000002c 	.word	0x2000002c

080038b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b090      	sub	sp, #64	; 0x40
 80038bc:	af04      	add	r7, sp, #16
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c8:	f3ef 8305 	mrs	r3, IPSR
 80038cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80038ce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 808f 	bne.w	80039f4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d6:	f3ef 8310 	mrs	r3, PRIMASK
 80038da:	61bb      	str	r3, [r7, #24]
  return(result);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038e2:	f3ef 8311 	mrs	r3, BASEPRI
 80038e6:	617b      	str	r3, [r7, #20]
  return(result);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <osThreadNew+0x3e>
 80038ee:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <osThreadNew+0x148>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d07e      	beq.n	80039f4 <osThreadNew+0x13c>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d07b      	beq.n	80039f4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003900:	2318      	movs	r3, #24
 8003902:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d045      	beq.n	80039a0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <osThreadNew+0x6a>
        name = attr->name;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <osThreadNew+0x90>
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	2b38      	cmp	r3, #56	; 0x38
 800393a:	d805      	bhi.n	8003948 <osThreadNew+0x90>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <osThreadNew+0x94>
        return (NULL);
 8003948:	2300      	movs	r3, #0
 800394a:	e054      	b.n	80039f6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <osThreadNew+0xca>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b5b      	cmp	r3, #91	; 0x5b
 800396a:	d90a      	bls.n	8003982 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <osThreadNew+0xca>
        mem = 1;
 800397c:	2301      	movs	r3, #1
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	e010      	b.n	80039a4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <osThreadNew+0xec>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d108      	bne.n	80039a4 <osThreadNew+0xec>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d104      	bne.n	80039a4 <osThreadNew+0xec>
          mem = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	e001      	b.n	80039a4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d110      	bne.n	80039cc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039b2:	9202      	str	r2, [sp, #8]
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 fe09 	bl	80045d8 <xTaskCreateStatic>
 80039c6:	4603      	mov	r3, r0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e013      	b.n	80039f4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d110      	bne.n	80039f4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	f107 0310 	add.w	r3, r7, #16
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fe51 	bl	800468c <xTaskCreate>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d001      	beq.n	80039f4 <osThreadNew+0x13c>
          hTask = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039f4:	693b      	ldr	r3, [r7, #16]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3730      	adds	r7, #48	; 0x30
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000002c 	.word	0x2000002c

08003a04 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0c:	f3ef 8305 	mrs	r3, IPSR
 8003a10:	613b      	str	r3, [r7, #16]
  return(result);
 8003a12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a24:	f3ef 8311 	mrs	r3, BASEPRI
 8003a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <osDelay+0x3c>
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <osDelay+0x58>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d103      	bne.n	8003a40 <osDelay+0x3c>
    stat = osErrorISR;
 8003a38:	f06f 0305 	mvn.w	r3, #5
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e007      	b.n	8003a50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 ff62 	bl	8004914 <vTaskDelay>
    }
  }

  return (stat);
 8003a50:	697b      	ldr	r3, [r7, #20]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2000002c 	.word	0x2000002c

08003a60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <vApplicationGetIdleTaskMemory+0x30>)
 8003a76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000030 	.word	0x20000030
 8003a90:	2000008c 	.word	0x2000008c

08003a94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003aa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <vApplicationGetTimerTaskMemory+0x30>)
 8003aaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab2:	601a      	str	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	2000028c 	.word	0x2000028c
 8003ac4:	200002e8 	.word	0x200002e8

08003ac8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f103 0208 	add.w	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f103 0208 	add.w	r2, r3, #8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f103 0208 	add.w	r2, r3, #8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b80:	d103      	bne.n	8003b8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e00c      	b.n	8003ba4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e002      	b.n	8003b98 <vListInsert+0x2e>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d2f6      	bcs.n	8003b92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6892      	ldr	r2, [r2, #8]
 8003bf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6852      	ldr	r2, [r2, #4]
 8003bfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d103      	bne.n	8003c10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1e5a      	subs	r2, r3, #1
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	e7fe      	b.n	8003c56 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003c58:	f002 f810 	bl	8005c7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	22ff      	movs	r2, #255	; 0xff
 8003c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	22ff      	movs	r2, #255	; 0xff
 8003ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d114      	bne.n	8003cd8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01a      	beq.n	8003cec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3310      	adds	r3, #16
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f8de 	bl	8004e7c <xTaskRemoveFromEventList>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d012      	beq.n	8003cec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <xQueueGenericReset+0xcc>)
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	e009      	b.n	8003cec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3310      	adds	r3, #16
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fef3 	bl	8003ac8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3324      	adds	r3, #36	; 0x24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff feee 	bl	8003ac8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cec:	f001 fff4 	bl	8005cd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cf0:	2301      	movs	r3, #1
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	; 0x38
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <xQueueGenericCreateStatic+0x28>
 8003d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d18:	f383 8811 	msr	BASEPRI, r3
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d26:	e7fe      	b.n	8003d26 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <xQueueGenericCreateStatic+0x42>
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d40:	e7fe      	b.n	8003d40 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <xQueueGenericCreateStatic+0x4e>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <xQueueGenericCreateStatic+0x52>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <xQueueGenericCreateStatic+0x54>
 8003d52:	2300      	movs	r3, #0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <xQueueGenericCreateStatic+0x6c>
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	e7fe      	b.n	8003d6a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <xQueueGenericCreateStatic+0x78>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <xQueueGenericCreateStatic+0x7c>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <xQueueGenericCreateStatic+0x7e>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <xQueueGenericCreateStatic+0x96>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	e7fe      	b.n	8003d94 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d96:	2350      	movs	r3, #80	; 0x50
 8003d98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b50      	cmp	r3, #80	; 0x50
 8003d9e:	d009      	beq.n	8003db4 <xQueueGenericCreateStatic+0xb4>
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e7fe      	b.n	8003db2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003db4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dc8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f805 	bl	8003de6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3730      	adds	r7, #48	; 0x30
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e002      	b.n	8003e08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e14:	2101      	movs	r1, #1
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	f7ff ff0a 	bl	8003c30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	; 0x38
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <xQueueGenericSend+0x30>
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5a:	e7fe      	b.n	8003e5a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <xQueueGenericSend+0x3e>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <xQueueGenericSend+0x42>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <xQueueGenericSend+0x44>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <xQueueGenericSend+0x5c>
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	e7fe      	b.n	8003e86 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d103      	bne.n	8003e96 <xQueueGenericSend+0x6a>
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <xQueueGenericSend+0x6e>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <xQueueGenericSend+0x70>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <xQueueGenericSend+0x88>
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	e7fe      	b.n	8003eb2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eb4:	f001 f998 	bl	80051e8 <xTaskGetSchedulerState>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <xQueueGenericSend+0x98>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <xQueueGenericSend+0x9c>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <xQueueGenericSend+0x9e>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <xQueueGenericSend+0xb6>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ee2:	f001 fecb 	bl	8005c7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <xQueueGenericSend+0xcc>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d129      	bne.n	8003f4c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003efe:	f000 f9ff 	bl	8004300 <prvCopyDataToQueue>
 8003f02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	3324      	adds	r3, #36	; 0x24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 ffb3 	bl	8004e7c <xTaskRemoveFromEventList>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f1c:	4b3f      	ldr	r3, [pc, #252]	; (800401c <xQueueGenericSend+0x1f0>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	e00a      	b.n	8003f44 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f34:	4b39      	ldr	r3, [pc, #228]	; (800401c <xQueueGenericSend+0x1f0>)
 8003f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f44:	f001 fec8 	bl	8005cd8 <vPortExitCritical>
				return pdPASS;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e063      	b.n	8004014 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f52:	f001 fec1 	bl	8005cd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e05c      	b.n	8004014 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 ffeb 	bl	8004f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f6e:	f001 feb3 	bl	8005cd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f72:	f000 fd67 	bl	8004a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f76:	f001 fe81 	bl	8005c7c <vPortEnterCritical>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f86:	d103      	bne.n	8003f90 <xQueueGenericSend+0x164>
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f96:	b25b      	sxtb	r3, r3
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9c:	d103      	bne.n	8003fa6 <xQueueGenericSend+0x17a>
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fa6:	f001 fe97 	bl	8005cd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003faa:	1d3a      	adds	r2, r7, #4
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 ffda 	bl	8004f6c <xTaskCheckForTimeOut>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d124      	bne.n	8004008 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fc0:	f000 fa96 	bl	80044f0 <prvIsQueueFull>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d018      	beq.n	8003ffc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	3310      	adds	r3, #16
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 ff04 	bl	8004de0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fda:	f000 fa21 	bl	8004420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fde:	f000 fd3f 	bl	8004a60 <xTaskResumeAll>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f47f af7c 	bne.w	8003ee2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <xQueueGenericSend+0x1f0>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	e772      	b.n	8003ee2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ffe:	f000 fa0f 	bl	8004420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004002:	f000 fd2d 	bl	8004a60 <xTaskResumeAll>
 8004006:	e76c      	b.n	8003ee2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800400a:	f000 fa09 	bl	8004420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800400e:	f000 fd27 	bl	8004a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004012:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004014:	4618      	mov	r0, r3
 8004016:	3738      	adds	r7, #56	; 0x38
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08e      	sub	sp, #56	; 0x38
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	2b00      	cmp	r3, #0
 8004036:	d109      	bne.n	800404c <xQueueGenericSendFromISR+0x2c>
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
 800404a:	e7fe      	b.n	800404a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <xQueueGenericSendFromISR+0x3a>
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <xQueueGenericSendFromISR+0x3e>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <xQueueGenericSendFromISR+0x40>
 800405e:	2300      	movs	r3, #0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <xQueueGenericSendFromISR+0x58>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	e7fe      	b.n	8004076 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d103      	bne.n	8004086 <xQueueGenericSendFromISR+0x66>
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <xQueueGenericSendFromISR+0x6a>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <xQueueGenericSendFromISR+0x6c>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <xQueueGenericSendFromISR+0x84>
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e7fe      	b.n	80040a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040a4:	f001 fec6 	bl	8005e34 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040a8:	f3ef 8211 	mrs	r2, BASEPRI
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	61ba      	str	r2, [r7, #24]
 80040be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d302      	bcc.n	80040d6 <xQueueGenericSendFromISR+0xb6>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d12c      	bne.n	8004130 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e6:	f000 f90b 	bl	8004300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f2:	d112      	bne.n	800411a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d016      	beq.n	800412a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	4618      	mov	r0, r3
 8004102:	f000 febb 	bl	8004e7c <xTaskRemoveFromEventList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00e      	beq.n	800412a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e007      	b.n	800412a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800411a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800411e:	3301      	adds	r3, #1
 8004120:	b2db      	uxtb	r3, r3
 8004122:	b25a      	sxtb	r2, r3
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800412a:	2301      	movs	r3, #1
 800412c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800412e:	e001      	b.n	8004134 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004130:	2300      	movs	r3, #0
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004140:	4618      	mov	r0, r3
 8004142:	3738      	adds	r7, #56	; 0x38
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	; 0x30
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004154:	2300      	movs	r3, #0
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <xQueueReceive+0x2e>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	623b      	str	r3, [r7, #32]
 8004174:	e7fe      	b.n	8004174 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d103      	bne.n	8004184 <xQueueReceive+0x3c>
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <xQueueReceive+0x40>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <xQueueReceive+0x42>
 8004188:	2300      	movs	r3, #0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <xQueueReceive+0x5a>
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	e7fe      	b.n	80041a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041a2:	f001 f821 	bl	80051e8 <xTaskGetSchedulerState>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <xQueueReceive+0x6a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <xQueueReceive+0x6e>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xQueueReceive+0x70>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <xQueueReceive+0x88>
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	e7fe      	b.n	80041ce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041d0:	f001 fd54 	bl	8005c7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01f      	beq.n	8004220 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e4:	f000 f8f6 	bl	80043d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	1e5a      	subs	r2, r3, #1
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00f      	beq.n	8004218 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	3310      	adds	r3, #16
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fe3d 	bl	8004e7c <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004208:	4b3c      	ldr	r3, [pc, #240]	; (80042fc <xQueueReceive+0x1b4>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004218:	f001 fd5e 	bl	8005cd8 <vPortExitCritical>
				return pdPASS;
 800421c:	2301      	movs	r3, #1
 800421e:	e069      	b.n	80042f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004226:	f001 fd57 	bl	8005cd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800422a:	2300      	movs	r3, #0
 800422c:	e062      	b.n	80042f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004234:	f107 0310 	add.w	r3, r7, #16
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fe81 	bl	8004f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800423e:	2301      	movs	r3, #1
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004242:	f001 fd49 	bl	8005cd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004246:	f000 fbfd 	bl	8004a44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800424a:	f001 fd17 	bl	8005c7c <vPortEnterCritical>
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004254:	b25b      	sxtb	r3, r3
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425a:	d103      	bne.n	8004264 <xQueueReceive+0x11c>
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800426a:	b25b      	sxtb	r3, r3
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004270:	d103      	bne.n	800427a <xQueueReceive+0x132>
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800427a:	f001 fd2d 	bl	8005cd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800427e:	1d3a      	adds	r2, r7, #4
 8004280:	f107 0310 	add.w	r3, r7, #16
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe70 	bl	8004f6c <xTaskCheckForTimeOut>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d123      	bne.n	80042da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004294:	f000 f916 	bl	80044c4 <prvIsQueueEmpty>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d017      	beq.n	80042ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	3324      	adds	r3, #36	; 0x24
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fd9a 	bl	8004de0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ae:	f000 f8b7 	bl	8004420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042b2:	f000 fbd5 	bl	8004a60 <xTaskResumeAll>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d189      	bne.n	80041d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <xQueueReceive+0x1b4>)
 80042be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	e780      	b.n	80041d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d0:	f000 f8a6 	bl	8004420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042d4:	f000 fbc4 	bl	8004a60 <xTaskResumeAll>
 80042d8:	e77a      	b.n	80041d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042dc:	f000 f8a0 	bl	8004420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042e0:	f000 fbbe 	bl	8004a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e6:	f000 f8ed 	bl	80044c4 <prvIsQueueEmpty>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f43f af6f 	beq.w	80041d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3730      	adds	r7, #48	; 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d14d      	bne.n	80043c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 ff7a 	bl	8005224 <xTaskPriorityDisinherit>
 8004330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e043      	b.n	80043c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d119      	bne.n	8004374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6858      	ldr	r0, [r3, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	461a      	mov	r2, r3
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	f001 ffaa 	bl	80062a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	441a      	add	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d32b      	bcc.n	80043c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	e026      	b.n	80043c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68d8      	ldr	r0, [r3, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	461a      	mov	r2, r3
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	f001 ff90 	bl	80062a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	425b      	negs	r3, r3
 800438e:	441a      	add	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d207      	bcs.n	80043b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	425b      	negs	r3, r3
 80043aa:	441a      	add	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d105      	bne.n	80043c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	3b01      	subs	r3, #1
 80043c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043ca:	697b      	ldr	r3, [r7, #20]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d018      	beq.n	8004418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	441a      	add	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d303      	bcc.n	8004408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68d9      	ldr	r1, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	461a      	mov	r2, r3
 8004412:	6838      	ldr	r0, [r7, #0]
 8004414:	f001 ff46 	bl	80062a4 <memcpy>
	}
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004428:	f001 fc28 	bl	8005c7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004434:	e011      	b.n	800445a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d012      	beq.n	8004464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3324      	adds	r3, #36	; 0x24
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fd1a 	bl	8004e7c <xTaskRemoveFromEventList>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800444e:	f000 fded 	bl	800502c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3b01      	subs	r3, #1
 8004456:	b2db      	uxtb	r3, r3
 8004458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800445a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445e:	2b00      	cmp	r3, #0
 8004460:	dce9      	bgt.n	8004436 <prvUnlockQueue+0x16>
 8004462:	e000      	b.n	8004466 <prvUnlockQueue+0x46>
					break;
 8004464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	22ff      	movs	r2, #255	; 0xff
 800446a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800446e:	f001 fc33 	bl	8005cd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004472:	f001 fc03 	bl	8005c7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800447c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800447e:	e011      	b.n	80044a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3310      	adds	r3, #16
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fcf5 	bl	8004e7c <xTaskRemoveFromEventList>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004498:	f000 fdc8 	bl	800502c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800449c:	7bbb      	ldrb	r3, [r7, #14]
 800449e:	3b01      	subs	r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dce9      	bgt.n	8004480 <prvUnlockQueue+0x60>
 80044ac:	e000      	b.n	80044b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044b8:	f001 fc0e 	bl	8005cd8 <vPortExitCritical>
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044cc:	f001 fbd6 	bl	8005c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	e001      	b.n	80044e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044e2:	f001 fbf9 	bl	8005cd8 <vPortExitCritical>

	return xReturn;
 80044e6:	68fb      	ldr	r3, [r7, #12]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044f8:	f001 fbc0 	bl	8005c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	429a      	cmp	r2, r3
 8004506:	d102      	bne.n	800450e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e001      	b.n	8004512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004512:	f001 fbe1 	bl	8005cd8 <vPortExitCritical>

	return xReturn;
 8004516:	68fb      	ldr	r3, [r7, #12]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	e014      	b.n	800455a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004530:	4a0e      	ldr	r2, [pc, #56]	; (800456c <vQueueAddToRegistry+0x4c>)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800453c:	490b      	ldr	r1, [pc, #44]	; (800456c <vQueueAddToRegistry+0x4c>)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <vQueueAddToRegistry+0x4c>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004552:	e005      	b.n	8004560 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b07      	cmp	r3, #7
 800455e:	d9e7      	bls.n	8004530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20004a94 	.word	0x20004a94

08004570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004580:	f001 fb7c 	bl	8005c7c <vPortEnterCritical>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800458a:	b25b      	sxtb	r3, r3
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004590:	d103      	bne.n	800459a <vQueueWaitForMessageRestricted+0x2a>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a6:	d103      	bne.n	80045b0 <vQueueWaitForMessageRestricted+0x40>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b0:	f001 fb92 	bl	8005cd8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3324      	adds	r3, #36	; 0x24
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fc2f 	bl	8004e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045ca:	6978      	ldr	r0, [r7, #20]
 80045cc:	f7ff ff28 	bl	8004420 <prvUnlockQueue>
	}
 80045d0:	bf00      	nop
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af04      	add	r7, sp, #16
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <xTaskCreateStatic+0x28>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	e7fe      	b.n	80045fe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <xTaskCreateStatic+0x42>
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e7fe      	b.n	8004618 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800461a:	235c      	movs	r3, #92	; 0x5c
 800461c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b5c      	cmp	r3, #92	; 0x5c
 8004622:	d009      	beq.n	8004638 <xTaskCreateStatic+0x60>
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e7fe      	b.n	8004636 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004638:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01e      	beq.n	800467e <xTaskCreateStatic+0xa6>
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01b      	beq.n	800467e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004658:	2300      	movs	r3, #0
 800465a:	9303      	str	r3, [sp, #12]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f850 	bl	8004716 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004678:	f000 f8dc 	bl	8004834 <prvAddNewTaskToReadyList>
 800467c:	e001      	b.n	8004682 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004682:	697b      	ldr	r3, [r7, #20]
	}
 8004684:	4618      	mov	r0, r3
 8004686:	3728      	adds	r7, #40	; 0x28
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af04      	add	r7, sp, #16
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 fc05 	bl	8005eb0 <pvPortMalloc>
 80046a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00e      	beq.n	80046cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046ae:	205c      	movs	r0, #92	; 0x5c
 80046b0:	f001 fbfe 	bl	8005eb0 <pvPortMalloc>
 80046b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	631a      	str	r2, [r3, #48]	; 0x30
 80046c2:	e005      	b.n	80046d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046c4:	6978      	ldr	r0, [r7, #20]
 80046c6:	f001 fcb5 	bl	8006034 <vPortFree>
 80046ca:	e001      	b.n	80046d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d017      	beq.n	8004706 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	2300      	movs	r3, #0
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	9302      	str	r3, [sp, #8]
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f80e 	bl	8004716 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046fa:	69f8      	ldr	r0, [r7, #28]
 80046fc:	f000 f89a 	bl	8004834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004700:	2301      	movs	r3, #1
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e002      	b.n	800470c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800470a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800470c:	69bb      	ldr	r3, [r7, #24]
	}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b088      	sub	sp, #32
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	461a      	mov	r2, r3
 800472e:	21a5      	movs	r1, #165	; 0xa5
 8004730:	f001 fdc3 	bl	80062ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800473e:	3b01      	subs	r3, #1
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f023 0307 	bic.w	r3, r3, #7
 800474c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <prvInitialiseNewTask+0x56>
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e7fe      	b.n	800476a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01f      	beq.n	80047b2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e012      	b.n	800479e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	7819      	ldrb	r1, [r3, #0]
 8004780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	3334      	adds	r3, #52	; 0x34
 8004788:	460a      	mov	r2, r1
 800478a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	3301      	adds	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b0f      	cmp	r3, #15
 80047a2:	d9e9      	bls.n	8004778 <prvInitialiseNewTask+0x62>
 80047a4:	e000      	b.n	80047a8 <prvInitialiseNewTask+0x92>
			{
				break;
 80047a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047b0:	e003      	b.n	80047ba <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	2b37      	cmp	r3, #55	; 0x37
 80047be:	d901      	bls.n	80047c4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047c0:	2337      	movs	r3, #55	; 0x37
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	2200      	movs	r2, #0
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	3304      	adds	r3, #4
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f994 	bl	8003b08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	3318      	adds	r3, #24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff f98f 	bl	8003b08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	2200      	movs	r2, #0
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	69b8      	ldr	r0, [r7, #24]
 8004814:	f001 f90c 	bl	8005a30 <pxPortInitialiseStack>
 8004818:	4602      	mov	r2, r0
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800482a:	bf00      	nop
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800483c:	f001 fa1e 	bl	8005c7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004840:	4b2d      	ldr	r3, [pc, #180]	; (80048f8 <prvAddNewTaskToReadyList+0xc4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3301      	adds	r3, #1
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <prvAddNewTaskToReadyList+0xc4>)
 8004848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800484a:	4b2c      	ldr	r3, [pc, #176]	; (80048fc <prvAddNewTaskToReadyList+0xc8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004852:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <prvAddNewTaskToReadyList+0xc8>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004858:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <prvAddNewTaskToReadyList+0xc4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d110      	bne.n	8004882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004860:	f000 fc08 	bl	8005074 <prvInitialiseTaskLists>
 8004864:	e00d      	b.n	8004882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004866:	4b26      	ldr	r3, [pc, #152]	; (8004900 <prvAddNewTaskToReadyList+0xcc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800486e:	4b23      	ldr	r3, [pc, #140]	; (80048fc <prvAddNewTaskToReadyList+0xc8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	429a      	cmp	r2, r3
 800487a:	d802      	bhi.n	8004882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800487c:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <prvAddNewTaskToReadyList+0xc8>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <prvAddNewTaskToReadyList+0xd0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3301      	adds	r3, #1
 8004888:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <prvAddNewTaskToReadyList+0xd0>)
 800488a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <prvAddNewTaskToReadyList+0xd0>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <prvAddNewTaskToReadyList+0xd4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d903      	bls.n	80048a8 <prvAddNewTaskToReadyList+0x74>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	4a18      	ldr	r2, [pc, #96]	; (8004908 <prvAddNewTaskToReadyList+0xd4>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a15      	ldr	r2, [pc, #84]	; (800490c <prvAddNewTaskToReadyList+0xd8>)
 80048b6:	441a      	add	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7ff f92f 	bl	8003b22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048c4:	f001 fa08 	bl	8005cd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <prvAddNewTaskToReadyList+0xcc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <prvAddNewTaskToReadyList+0xc8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	429a      	cmp	r2, r3
 80048dc:	d207      	bcs.n	80048ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <prvAddNewTaskToReadyList+0xdc>)
 80048e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000bbc 	.word	0x20000bbc
 80048fc:	200006e8 	.word	0x200006e8
 8004900:	20000bc8 	.word	0x20000bc8
 8004904:	20000bd8 	.word	0x20000bd8
 8004908:	20000bc4 	.word	0x20000bc4
 800490c:	200006ec 	.word	0x200006ec
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <vTaskDelay+0x60>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <vTaskDelay+0x2e>
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	e7fe      	b.n	8004940 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004942:	f000 f87f 	bl	8004a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004946:	2100      	movs	r1, #0
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fcd7 	bl	80052fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800494e:	f000 f887 	bl	8004a60 <xTaskResumeAll>
 8004952:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d107      	bne.n	800496a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <vTaskDelay+0x64>)
 800495c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000be4 	.word	0x20000be4
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800498a:	463a      	mov	r2, r7
 800498c:	1d39      	adds	r1, r7, #4
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f864 	bl	8003a60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004998:	6839      	ldr	r1, [r7, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	9202      	str	r2, [sp, #8]
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	2300      	movs	r3, #0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	2300      	movs	r3, #0
 80049a8:	460a      	mov	r2, r1
 80049aa:	4920      	ldr	r1, [pc, #128]	; (8004a2c <vTaskStartScheduler+0xb0>)
 80049ac:	4820      	ldr	r0, [pc, #128]	; (8004a30 <vTaskStartScheduler+0xb4>)
 80049ae:	f7ff fe13 	bl	80045d8 <xTaskCreateStatic>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b1f      	ldr	r3, [pc, #124]	; (8004a34 <vTaskStartScheduler+0xb8>)
 80049b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049b8:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <vTaskStartScheduler+0xb8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e001      	b.n	80049ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d102      	bne.n	80049d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80049d0:	f000 fce8 	bl	80053a4 <xTimerCreateTimerTask>
 80049d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d115      	bne.n	8004a08 <vTaskStartScheduler+0x8c>
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <vTaskStartScheduler+0xbc>)
 80049f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <vTaskStartScheduler+0xc0>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049fc:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <vTaskStartScheduler+0xc4>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a02:	f001 f89d 	bl	8005b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a06:	e00d      	b.n	8004a24 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a0e:	d109      	bne.n	8004a24 <vTaskStartScheduler+0xa8>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e7fe      	b.n	8004a22 <vTaskStartScheduler+0xa6>
}
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	080062fc 	.word	0x080062fc
 8004a30:	08005045 	.word	0x08005045
 8004a34:	20000be0 	.word	0x20000be0
 8004a38:	20000bdc 	.word	0x20000bdc
 8004a3c:	20000bc8 	.word	0x20000bc8
 8004a40:	20000bc0 	.word	0x20000bc0

08004a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <vTaskSuspendAll+0x18>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <vTaskSuspendAll+0x18>)
 8004a50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	20000be4 	.word	0x20000be4

08004a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <xTaskResumeAll+0x2a>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	e7fe      	b.n	8004a88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a8a:	f001 f8f7 	bl	8005c7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a8e:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <xTaskResumeAll+0x114>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d162      	bne.n	8004b66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa0:	4b35      	ldr	r3, [pc, #212]	; (8004b78 <xTaskResumeAll+0x118>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d05e      	beq.n	8004b66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aa8:	e02f      	b.n	8004b0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aaa:	4b34      	ldr	r3, [pc, #208]	; (8004b7c <xTaskResumeAll+0x11c>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3318      	adds	r3, #24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff f890 	bl	8003bdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff f88b 	bl	8003bdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4b2d      	ldr	r3, [pc, #180]	; (8004b80 <xTaskResumeAll+0x120>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d903      	bls.n	8004ada <xTaskResumeAll+0x7a>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <xTaskResumeAll+0x120>)
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <xTaskResumeAll+0x124>)
 8004ae8:	441a      	add	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff f816 	bl	8003b22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <xTaskResumeAll+0x128>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004b04:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0a:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <xTaskResumeAll+0x11c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1cb      	bne.n	8004aaa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b18:	f000 fb46 	bl	80051a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <xTaskResumeAll+0x130>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d010      	beq.n	8004b4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b28:	f000 f846 	bl	8004bb8 <xTaskIncrementTick>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b32:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f1      	bne.n	8004b28 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <xTaskResumeAll+0x130>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <xTaskResumeAll+0x12c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <xTaskResumeAll+0x134>)
 8004b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b66:	f001 f8b7 	bl	8005cd8 <vPortExitCritical>

	return xAlreadyYielded;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000be4 	.word	0x20000be4
 8004b78:	20000bbc 	.word	0x20000bbc
 8004b7c:	20000b7c 	.word	0x20000b7c
 8004b80:	20000bc4 	.word	0x20000bc4
 8004b84:	200006ec 	.word	0x200006ec
 8004b88:	200006e8 	.word	0x200006e8
 8004b8c:	20000bd0 	.word	0x20000bd0
 8004b90:	20000bcc 	.word	0x20000bcc
 8004b94:	e000ed04 	.word	0xe000ed04

08004b98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <xTaskGetTickCount+0x1c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ba4:	687b      	ldr	r3, [r7, #4]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000bc0 	.word	0x20000bc0

08004bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	; (8004cfc <xTaskIncrementTick+0x144>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f040 8088 	bne.w	8004cdc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bcc:	4b4c      	ldr	r3, [pc, #304]	; (8004d00 <xTaskIncrementTick+0x148>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bd4:	4a4a      	ldr	r2, [pc, #296]	; (8004d00 <xTaskIncrementTick+0x148>)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11f      	bne.n	8004c20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004be0:	4b48      	ldr	r3, [pc, #288]	; (8004d04 <xTaskIncrementTick+0x14c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <xTaskIncrementTick+0x46>
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	e7fe      	b.n	8004bfc <xTaskIncrementTick+0x44>
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <xTaskIncrementTick+0x14c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <xTaskIncrementTick+0x150>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a3e      	ldr	r2, [pc, #248]	; (8004d04 <xTaskIncrementTick+0x14c>)
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4a3e      	ldr	r2, [pc, #248]	; (8004d08 <xTaskIncrementTick+0x150>)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b3e      	ldr	r3, [pc, #248]	; (8004d0c <xTaskIncrementTick+0x154>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	4a3c      	ldr	r2, [pc, #240]	; (8004d0c <xTaskIncrementTick+0x154>)
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	f000 fac4 	bl	80051a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c20:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <xTaskIncrementTick+0x158>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d349      	bcc.n	8004cbe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c2a:	4b36      	ldr	r3, [pc, #216]	; (8004d04 <xTaskIncrementTick+0x14c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <xTaskIncrementTick+0x158>)
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c3a:	601a      	str	r2, [r3, #0]
					break;
 8004c3c:	e03f      	b.n	8004cbe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <xTaskIncrementTick+0x14c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d203      	bcs.n	8004c5e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c56:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <xTaskIncrementTick+0x158>)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c5c:	e02f      	b.n	8004cbe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe ffba 	bl	8003bdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	3318      	adds	r3, #24
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe ffb1 	bl	8003bdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <xTaskIncrementTick+0x15c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d903      	bls.n	8004c8e <xTaskIncrementTick+0xd6>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <xTaskIncrementTick+0x15c>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <xTaskIncrementTick+0x160>)
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7fe ff3c 	bl	8003b22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <xTaskIncrementTick+0x164>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3b8      	bcc.n	8004c2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cbc:	e7b5      	b.n	8004c2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <xTaskIncrementTick+0x164>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	4914      	ldr	r1, [pc, #80]	; (8004d18 <xTaskIncrementTick+0x160>)
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d907      	bls.n	8004ce6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e004      	b.n	8004ce6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <xTaskIncrementTick+0x168>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <xTaskIncrementTick+0x168>)
 8004ce4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ce6:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <xTaskIncrementTick+0x16c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cf2:	697b      	ldr	r3, [r7, #20]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000be4 	.word	0x20000be4
 8004d00:	20000bc0 	.word	0x20000bc0
 8004d04:	20000b74 	.word	0x20000b74
 8004d08:	20000b78 	.word	0x20000b78
 8004d0c:	20000bd4 	.word	0x20000bd4
 8004d10:	20000bdc 	.word	0x20000bdc
 8004d14:	20000bc4 	.word	0x20000bc4
 8004d18:	200006ec 	.word	0x200006ec
 8004d1c:	200006e8 	.word	0x200006e8
 8004d20:	20000bcc 	.word	0x20000bcc
 8004d24:	20000bd0 	.word	0x20000bd0

08004d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d2e:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <vTaskSwitchContext+0xa4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <vTaskSwitchContext+0xa8>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d3c:	e040      	b.n	8004dc0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <vTaskSwitchContext+0xa8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <vTaskSwitchContext+0xac>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e00f      	b.n	8004d6c <vTaskSwitchContext+0x44>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <vTaskSwitchContext+0x3e>
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e7fe      	b.n	8004d64 <vTaskSwitchContext+0x3c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	491a      	ldr	r1, [pc, #104]	; (8004dd8 <vTaskSwitchContext+0xb0>)
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0e5      	beq.n	8004d4c <vTaskSwitchContext+0x24>
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <vTaskSwitchContext+0xb0>)
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	3308      	adds	r3, #8
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d104      	bne.n	8004db0 <vTaskSwitchContext+0x88>
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <vTaskSwitchContext+0xb4>)
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <vTaskSwitchContext+0xac>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	20000be4 	.word	0x20000be4
 8004dd0:	20000bd0 	.word	0x20000bd0
 8004dd4:	20000bc4 	.word	0x20000bc4
 8004dd8:	200006ec 	.word	0x200006ec
 8004ddc:	200006e8 	.word	0x200006e8

08004de0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <vTaskPlaceOnEventList+0x24>
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e7fe      	b.n	8004e02 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <vTaskPlaceOnEventList+0x44>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3318      	adds	r3, #24
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fe feac 	bl	8003b6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e12:	2101      	movs	r1, #1
 8004e14:	6838      	ldr	r0, [r7, #0]
 8004e16:	f000 fa71 	bl	80052fc <prvAddCurrentTaskToDelayedList>
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200006e8 	.word	0x200006e8

08004e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <vTaskPlaceOnEventListRestricted+0x26>
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e7fe      	b.n	8004e4c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <vTaskPlaceOnEventListRestricted+0x50>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3318      	adds	r3, #24
 8004e54:	4619      	mov	r1, r3
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7fe fe63 	bl	8003b22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f000 fa46 	bl	80052fc <prvAddCurrentTaskToDelayedList>
	}
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200006e8 	.word	0x200006e8

08004e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <xTaskRemoveFromEventList+0x2a>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3318      	adds	r3, #24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fe fe96 	bl	8003bdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <xTaskRemoveFromEventList+0xac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11d      	bne.n	8004ef4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe fe8d 	bl	8003bdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <xTaskRemoveFromEventList+0xb0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d903      	bls.n	8004ed6 <xTaskRemoveFromEventList+0x5a>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	4a16      	ldr	r2, [pc, #88]	; (8004f2c <xTaskRemoveFromEventList+0xb0>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a13      	ldr	r2, [pc, #76]	; (8004f30 <xTaskRemoveFromEventList+0xb4>)
 8004ee4:	441a      	add	r2, r3
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe fe18 	bl	8003b22 <vListInsertEnd>
 8004ef2:	e005      	b.n	8004f00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	4619      	mov	r1, r3
 8004efa:	480e      	ldr	r0, [pc, #56]	; (8004f34 <xTaskRemoveFromEventList+0xb8>)
 8004efc:	f7fe fe11 	bl	8003b22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <xTaskRemoveFromEventList+0xbc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d905      	bls.n	8004f1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <xTaskRemoveFromEventList+0xc0>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	e001      	b.n	8004f1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f1e:	697b      	ldr	r3, [r7, #20]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000be4 	.word	0x20000be4
 8004f2c:	20000bc4 	.word	0x20000bc4
 8004f30:	200006ec 	.word	0x200006ec
 8004f34:	20000b7c 	.word	0x20000b7c
 8004f38:	200006e8 	.word	0x200006e8
 8004f3c:	20000bd0 	.word	0x20000bd0

08004f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <vTaskInternalSetTimeOutState+0x24>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <vTaskInternalSetTimeOutState+0x28>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000bd4 	.word	0x20000bd4
 8004f68:	20000bc0 	.word	0x20000bc0

08004f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <xTaskCheckForTimeOut+0x24>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e7fe      	b.n	8004f8e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <xTaskCheckForTimeOut+0x3e>
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e7fe      	b.n	8004fa8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004faa:	f000 fe67 	bl	8005c7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <xTaskCheckForTimeOut+0xb8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc6:	d102      	bne.n	8004fce <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e023      	b.n	8005016 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b15      	ldr	r3, [pc, #84]	; (8005028 <xTaskCheckForTimeOut+0xbc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d007      	beq.n	8004fea <xTaskCheckForTimeOut+0x7e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e015      	b.n	8005016 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d20b      	bcs.n	800500c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad2      	subs	r2, r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff9d 	bl	8004f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e004      	b.n	8005016 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005016:	f000 fe5f 	bl	8005cd8 <vPortExitCritical>

	return xReturn;
 800501a:	69fb      	ldr	r3, [r7, #28]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000bc0 	.word	0x20000bc0
 8005028:	20000bd4 	.word	0x20000bd4

0800502c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <vTaskMissedYield+0x14>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000bd0 	.word	0x20000bd0

08005044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800504c:	f000 f852 	bl	80050f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <prvIdleTask+0x28>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d9f9      	bls.n	800504c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <prvIdleTask+0x2c>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005068:	e7f0      	b.n	800504c <prvIdleTask+0x8>
 800506a:	bf00      	nop
 800506c:	200006ec 	.word	0x200006ec
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	e00c      	b.n	800509a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <prvInitialiseTaskLists+0x60>)
 800508c:	4413      	add	r3, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fd1a 	bl	8003ac8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b37      	cmp	r3, #55	; 0x37
 800509e:	d9ef      	bls.n	8005080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <prvInitialiseTaskLists+0x64>)
 80050a2:	f7fe fd11 	bl	8003ac8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050a6:	480d      	ldr	r0, [pc, #52]	; (80050dc <prvInitialiseTaskLists+0x68>)
 80050a8:	f7fe fd0e 	bl	8003ac8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050ac:	480c      	ldr	r0, [pc, #48]	; (80050e0 <prvInitialiseTaskLists+0x6c>)
 80050ae:	f7fe fd0b 	bl	8003ac8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050b2:	480c      	ldr	r0, [pc, #48]	; (80050e4 <prvInitialiseTaskLists+0x70>)
 80050b4:	f7fe fd08 	bl	8003ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b8:	480b      	ldr	r0, [pc, #44]	; (80050e8 <prvInitialiseTaskLists+0x74>)
 80050ba:	f7fe fd05 	bl	8003ac8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050be:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <prvInitialiseTaskLists+0x78>)
 80050c0:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <prvInitialiseTaskLists+0x64>)
 80050c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <prvInitialiseTaskLists+0x7c>)
 80050c6:	4a05      	ldr	r2, [pc, #20]	; (80050dc <prvInitialiseTaskLists+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	200006ec 	.word	0x200006ec
 80050d8:	20000b4c 	.word	0x20000b4c
 80050dc:	20000b60 	.word	0x20000b60
 80050e0:	20000b7c 	.word	0x20000b7c
 80050e4:	20000b90 	.word	0x20000b90
 80050e8:	20000ba8 	.word	0x20000ba8
 80050ec:	20000b74 	.word	0x20000b74
 80050f0:	20000b78 	.word	0x20000b78

080050f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fa:	e019      	b.n	8005130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050fc:	f000 fdbe 	bl	8005c7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <prvCheckTasksWaitingTermination+0x4c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe fd65 	bl	8003bdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <prvCheckTasksWaitingTermination+0x50>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <prvCheckTasksWaitingTermination+0x50>)
 800511a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3b01      	subs	r3, #1
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 8005124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005126:	f000 fdd7 	bl	8005cd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f80e 	bl	800514c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <prvCheckTasksWaitingTermination+0x54>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e1      	bne.n	80050fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005138:	bf00      	nop
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000b90 	.word	0x20000b90
 8005144:	20000bbc 	.word	0x20000bbc
 8005148:	20000ba4 	.word	0x20000ba4

0800514c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800515a:	2b00      	cmp	r3, #0
 800515c:	d108      	bne.n	8005170 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	4618      	mov	r0, r3
 8005164:	f000 ff66 	bl	8006034 <vPortFree>
				vPortFree( pxTCB );
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 ff63 	bl	8006034 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800516e:	e017      	b.n	80051a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005176:	2b01      	cmp	r3, #1
 8005178:	d103      	bne.n	8005182 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 ff5a 	bl	8006034 <vPortFree>
	}
 8005180:	e00e      	b.n	80051a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005188:	2b02      	cmp	r3, #2
 800518a:	d009      	beq.n	80051a0 <prvDeleteTCB+0x54>
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e7fe      	b.n	800519e <prvDeleteTCB+0x52>
	}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <prvResetNextTaskUnblockTime+0x38>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <prvResetNextTaskUnblockTime+0x3c>)
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051c0:	e008      	b.n	80051d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c2:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <prvResetNextTaskUnblockTime+0x38>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <prvResetNextTaskUnblockTime+0x3c>)
 80051d2:	6013      	str	r3, [r2, #0]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	20000b74 	.word	0x20000b74
 80051e4:	20000bdc 	.word	0x20000bdc

080051e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051ee:	4b0b      	ldr	r3, [pc, #44]	; (800521c <xTaskGetSchedulerState+0x34>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051f6:	2301      	movs	r3, #1
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	e008      	b.n	800520e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051fc:	4b08      	ldr	r3, [pc, #32]	; (8005220 <xTaskGetSchedulerState+0x38>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005204:	2302      	movs	r3, #2
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	e001      	b.n	800520e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800520a:	2300      	movs	r3, #0
 800520c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800520e:	687b      	ldr	r3, [r7, #4]
	}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000bc8 	.word	0x20000bc8
 8005220:	20000be4 	.word	0x20000be4

08005224 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d054      	beq.n	80052e4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800523a:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <xTaskPriorityDisinherit+0xcc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	429a      	cmp	r2, r3
 8005242:	d009      	beq.n	8005258 <xTaskPriorityDisinherit+0x34>
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e7fe      	b.n	8005256 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <xTaskPriorityDisinherit+0x50>
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	e7fe      	b.n	8005272 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005286:	429a      	cmp	r2, r3
 8005288:	d02c      	beq.n	80052e4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d128      	bne.n	80052e4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fca0 	bl	8003bdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <xTaskPriorityDisinherit+0xd0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d903      	bls.n	80052c4 <xTaskPriorityDisinherit+0xa0>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <xTaskPriorityDisinherit+0xd0>)
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4a09      	ldr	r2, [pc, #36]	; (80052f8 <xTaskPriorityDisinherit+0xd4>)
 80052d2:	441a      	add	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fe fc21 	bl	8003b22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052e4:	697b      	ldr	r3, [r7, #20]
	}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200006e8 	.word	0x200006e8
 80052f4:	20000bc4 	.word	0x20000bc4
 80052f8:	200006ec 	.word	0x200006ec

080052fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005306:	4b21      	ldr	r3, [pc, #132]	; (800538c <prvAddCurrentTaskToDelayedList+0x90>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800530c:	4b20      	ldr	r3, [pc, #128]	; (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3304      	adds	r3, #4
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fc62 	bl	8003bdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800531e:	d10a      	bne.n	8005336 <prvAddCurrentTaskToDelayedList+0x3a>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4819      	ldr	r0, [pc, #100]	; (8005394 <prvAddCurrentTaskToDelayedList+0x98>)
 8005330:	f7fe fbf7 	bl	8003b22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005334:	e026      	b.n	8005384 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4413      	add	r3, r2
 800533c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800533e:	4b14      	ldr	r3, [pc, #80]	; (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	429a      	cmp	r2, r3
 800534c:	d209      	bcs.n	8005362 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b0f      	ldr	r3, [pc, #60]	; (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f7fe fc05 	bl	8003b6a <vListInsert>
}
 8005360:	e010      	b.n	8005384 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <prvAddCurrentTaskToDelayedList+0x94>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f7fe fbfb 	bl	8003b6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d202      	bcs.n	8005384 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6013      	str	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000bc0 	.word	0x20000bc0
 8005390:	200006e8 	.word	0x200006e8
 8005394:	20000ba8 	.word	0x20000ba8
 8005398:	20000b78 	.word	0x20000b78
 800539c:	20000b74 	.word	0x20000b74
 80053a0:	20000bdc 	.word	0x20000bdc

080053a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053ae:	f000 faff 	bl	80059b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <xTimerCreateTimerTask+0x80>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d021      	beq.n	80053fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053c2:	1d3a      	adds	r2, r7, #4
 80053c4:	f107 0108 	add.w	r1, r7, #8
 80053c8:	f107 030c 	add.w	r3, r7, #12
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fb61 	bl	8003a94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	9202      	str	r2, [sp, #8]
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	2302      	movs	r3, #2
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	2300      	movs	r3, #0
 80053e2:	460a      	mov	r2, r1
 80053e4:	4910      	ldr	r1, [pc, #64]	; (8005428 <xTimerCreateTimerTask+0x84>)
 80053e6:	4811      	ldr	r0, [pc, #68]	; (800542c <xTimerCreateTimerTask+0x88>)
 80053e8:	f7ff f8f6 	bl	80045d8 <xTaskCreateStatic>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <xTimerCreateTimerTask+0x8c>)
 80053f0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <xTimerCreateTimerTask+0x8c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053fa:	2301      	movs	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d109      	bne.n	8005418 <xTimerCreateTimerTask+0x74>
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e7fe      	b.n	8005416 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005418:	697b      	ldr	r3, [r7, #20]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000c18 	.word	0x20000c18
 8005428:	08006304 	.word	0x08006304
 800542c:	08005565 	.word	0x08005565
 8005430:	20000c1c 	.word	0x20000c1c

08005434 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005442:	2300      	movs	r3, #0
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <xTimerGenericCommand+0x2c>
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	e7fe      	b.n	800545e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005460:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <xTimerGenericCommand+0x94>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d02a      	beq.n	80054be <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b05      	cmp	r3, #5
 8005478:	dc18      	bgt.n	80054ac <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800547a:	f7ff feb5 	bl	80051e8 <xTaskGetSchedulerState>
 800547e:	4603      	mov	r3, r0
 8005480:	2b02      	cmp	r3, #2
 8005482:	d109      	bne.n	8005498 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <xTimerGenericCommand+0x94>)
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	f107 0110 	add.w	r1, r7, #16
 800548c:	2300      	movs	r3, #0
 800548e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005490:	f7fe fccc 	bl	8003e2c <xQueueGenericSend>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24
 8005496:	e012      	b.n	80054be <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <xTimerGenericCommand+0x94>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	f107 0110 	add.w	r1, r7, #16
 80054a0:	2300      	movs	r3, #0
 80054a2:	2200      	movs	r2, #0
 80054a4:	f7fe fcc2 	bl	8003e2c <xQueueGenericSend>
 80054a8:	6278      	str	r0, [r7, #36]	; 0x24
 80054aa:	e008      	b.n	80054be <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <xTimerGenericCommand+0x94>)
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	f107 0110 	add.w	r1, r7, #16
 80054b4:	2300      	movs	r3, #0
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	f7fe fdb2 	bl	8004020 <xQueueGenericSendFromISR>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3728      	adds	r7, #40	; 0x28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000c18 	.word	0x20000c18

080054cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d6:	4b22      	ldr	r3, [pc, #136]	; (8005560 <prvProcessExpiredTimer+0x94>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe fb79 	bl	8003bdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d021      	beq.n	800553c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	18d1      	adds	r1, r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6978      	ldr	r0, [r7, #20]
 8005506:	f000 f8d1 	bl	80056ac <prvInsertTimerInActiveList>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01e      	beq.n	800554e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005510:	2300      	movs	r3, #0
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	2100      	movs	r1, #0
 800551a:	6978      	ldr	r0, [r7, #20]
 800551c:	f7ff ff8a 	bl	8005434 <xTimerGenericCommand>
 8005520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d112      	bne.n	800554e <prvProcessExpiredTimer+0x82>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	e7fe      	b.n	800553a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	b2da      	uxtb	r2, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	6978      	ldr	r0, [r7, #20]
 8005554:	4798      	blx	r3
}
 8005556:	bf00      	nop
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000c10 	.word	0x20000c10

08005564 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800556c:	f107 0308 	add.w	r3, r7, #8
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f857 	bl	8005624 <prvGetNextExpireTime>
 8005576:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4619      	mov	r1, r3
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f803 	bl	8005588 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005582:	f000 f8d5 	bl	8005730 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005586:	e7f1      	b.n	800556c <prvTimerTask+0x8>

08005588 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005592:	f7ff fa57 	bl	8004a44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005596:	f107 0308 	add.w	r3, r7, #8
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f866 	bl	800566c <prvSampleTimeNow>
 80055a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d130      	bne.n	800560a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <prvProcessTimerOrBlockTask+0x3c>
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d806      	bhi.n	80055c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055b6:	f7ff fa53 	bl	8004a60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff ff85 	bl	80054cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055c2:	e024      	b.n	800560e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <prvProcessTimerOrBlockTask+0x90>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <prvProcessTimerOrBlockTask+0x50>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <prvProcessTimerOrBlockTask+0x52>
 80055d8:	2300      	movs	r3, #0
 80055da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <prvProcessTimerOrBlockTask+0x94>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	f7fe ffc1 	bl	8004570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055ee:	f7ff fa37 	bl	8004a60 <xTaskResumeAll>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <prvProcessTimerOrBlockTask+0x98>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
}
 8005608:	e001      	b.n	800560e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800560a:	f7ff fa29 	bl	8004a60 <xTaskResumeAll>
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000c14 	.word	0x20000c14
 800561c:	20000c18 	.word	0x20000c18
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <prvGetNextExpireTime+0x44>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <prvGetNextExpireTime+0x16>
 8005636:	2201      	movs	r2, #1
 8005638:	e000      	b.n	800563c <prvGetNextExpireTime+0x18>
 800563a:	2200      	movs	r2, #0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <prvGetNextExpireTime+0x44>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e001      	b.n	8005658 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005658:	68fb      	ldr	r3, [r7, #12]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000c10 	.word	0x20000c10

0800566c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005674:	f7ff fa90 	bl	8004b98 <xTaskGetTickCount>
 8005678:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <prvSampleTimeNow+0x3c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	429a      	cmp	r2, r3
 8005682:	d205      	bcs.n	8005690 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005684:	f000 f930 	bl	80058e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e002      	b.n	8005696 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005696:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <prvSampleTimeNow+0x3c>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000c20 	.word	0x20000c20

080056ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d812      	bhi.n	80056f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	e01b      	b.n	800571e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <prvInsertTimerInActiveList+0x7c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f7fe fa3a 	bl	8003b6a <vListInsert>
 80056f6:	e012      	b.n	800571e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d206      	bcs.n	800570e <prvInsertTimerInActiveList+0x62>
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e007      	b.n	800571e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800570e:	4b07      	ldr	r3, [pc, #28]	; (800572c <prvInsertTimerInActiveList+0x80>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7fe fa26 	bl	8003b6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800571e:	697b      	ldr	r3, [r7, #20]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000c14 	.word	0x20000c14
 800572c:	20000c10 	.word	0x20000c10

08005730 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08e      	sub	sp, #56	; 0x38
 8005734:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005736:	e0c6      	b.n	80058c6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da17      	bge.n	800576e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	3304      	adds	r3, #4
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <prvProcessReceivedCommands+0x2e>
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e7fe      	b.n	800575c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005764:	6850      	ldr	r0, [r2, #4]
 8005766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005768:	6892      	ldr	r2, [r2, #8]
 800576a:	4611      	mov	r1, r2
 800576c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f2c0 80a7 	blt.w	80058c4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	3304      	adds	r3, #4
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fa28 	bl	8003bdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800578c:	463b      	mov	r3, r7
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff ff6c 	bl	800566c <prvSampleTimeNow>
 8005794:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b09      	cmp	r3, #9
 800579a:	f200 8094 	bhi.w	80058c6 <prvProcessReceivedCommands+0x196>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <prvProcessReceivedCommands+0x74>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057cd 	.word	0x080057cd
 80057a8:	080057cd 	.word	0x080057cd
 80057ac:	080057cd 	.word	0x080057cd
 80057b0:	0800583f 	.word	0x0800583f
 80057b4:	08005853 	.word	0x08005853
 80057b8:	0800589b 	.word	0x0800589b
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	080057cd 	.word	0x080057cd
 80057c4:	0800583f 	.word	0x0800583f
 80057c8:	08005853 	.word	0x08005853
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	18d1      	adds	r1, r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ec:	f7ff ff5e 	bl	80056ac <prvInsertTimerInActiveList>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d067      	beq.n	80058c6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05c      	beq.n	80058c6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	441a      	add	r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2300      	movs	r3, #0
 800581a:	2100      	movs	r1, #0
 800581c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581e:	f7ff fe09 	bl	8005434 <xTimerGenericCommand>
 8005822:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d14d      	bne.n	80058c6 <prvProcessReceivedCommands+0x196>
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e7fe      	b.n	800583c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	b2da      	uxtb	r2, r3
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005850:	e039      	b.n	80058c6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	b2da      	uxtb	r2, r3
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <prvProcessReceivedCommands+0x156>
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e7fe      	b.n	8005884 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	18d1      	adds	r1, r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005894:	f7ff ff0a 	bl	80056ac <prvInsertTimerInActiveList>
					break;
 8005898:	e015      	b.n	80058c6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80058a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058aa:	f000 fbc3 	bl	8006034 <vPortFree>
 80058ae:	e00a      	b.n	80058c6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058c2:	e000      	b.n	80058c6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058c6:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <prvProcessReceivedCommands+0x1b4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	1d39      	adds	r1, r7, #4
 80058cc:	2200      	movs	r2, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fc3a 	bl	8004148 <xQueueReceive>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f47f af2e 	bne.w	8005738 <prvProcessReceivedCommands+0x8>
	}
}
 80058dc:	bf00      	nop
 80058de:	3730      	adds	r7, #48	; 0x30
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000c18 	.word	0x20000c18

080058e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058ee:	e047      	b.n	8005980 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058f0:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fa:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3304      	adds	r3, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe f967 	bl	8003bdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d02d      	beq.n	8005980 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	429a      	cmp	r2, r3
 8005934:	d90e      	bls.n	8005954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3304      	adds	r3, #4
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fe f90c 	bl	8003b6a <vListInsert>
 8005952:	e015      	b.n	8005980 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2300      	movs	r3, #0
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	2100      	movs	r1, #0
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fd68 	bl	8005434 <xTimerGenericCommand>
 8005964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <prvSwitchTimerLists+0x98>
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	603b      	str	r3, [r7, #0]
 800597e:	e7fe      	b.n	800597e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1b2      	bne.n	80058f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800598a:	4b07      	ldr	r3, [pc, #28]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <prvSwitchTimerLists+0xc4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <prvSwitchTimerLists+0xc0>)
 8005996:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005998:	4a04      	ldr	r2, [pc, #16]	; (80059ac <prvSwitchTimerLists+0xc4>)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	6013      	str	r3, [r2, #0]
}
 800599e:	bf00      	nop
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000c10 	.word	0x20000c10
 80059ac:	20000c14 	.word	0x20000c14

080059b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059b6:	f000 f961 	bl	8005c7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059ba:	4b15      	ldr	r3, [pc, #84]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d120      	bne.n	8005a04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059c2:	4814      	ldr	r0, [pc, #80]	; (8005a14 <prvCheckForValidListAndQueue+0x64>)
 80059c4:	f7fe f880 	bl	8003ac8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059c8:	4813      	ldr	r0, [pc, #76]	; (8005a18 <prvCheckForValidListAndQueue+0x68>)
 80059ca:	f7fe f87d 	bl	8003ac8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <prvCheckForValidListAndQueue+0x6c>)
 80059d0:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <prvCheckForValidListAndQueue+0x64>)
 80059d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059d4:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <prvCheckForValidListAndQueue+0x70>)
 80059d6:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <prvCheckForValidListAndQueue+0x68>)
 80059d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059da:	2300      	movs	r3, #0
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <prvCheckForValidListAndQueue+0x74>)
 80059e0:	4a11      	ldr	r2, [pc, #68]	; (8005a28 <prvCheckForValidListAndQueue+0x78>)
 80059e2:	2110      	movs	r1, #16
 80059e4:	200a      	movs	r0, #10
 80059e6:	f7fe f98b 	bl	8003d00 <xQueueGenericCreateStatic>
 80059ea:	4602      	mov	r2, r0
 80059ec:	4b08      	ldr	r3, [pc, #32]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059ee:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <prvCheckForValidListAndQueue+0x60>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	490b      	ldr	r1, [pc, #44]	; (8005a2c <prvCheckForValidListAndQueue+0x7c>)
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fd8e 	bl	8004520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a04:	f000 f968 	bl	8005cd8 <vPortExitCritical>
}
 8005a08:	bf00      	nop
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000c18 	.word	0x20000c18
 8005a14:	20000be8 	.word	0x20000be8
 8005a18:	20000bfc 	.word	0x20000bfc
 8005a1c:	20000c10 	.word	0x20000c10
 8005a20:	20000c14 	.word	0x20000c14
 8005a24:	20000cc4 	.word	0x20000cc4
 8005a28:	20000c24 	.word	0x20000c24
 8005a2c:	0800630c 	.word	0x0800630c

08005a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3b04      	subs	r3, #4
 8005a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3b04      	subs	r3, #4
 8005a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f023 0201 	bic.w	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3b04      	subs	r3, #4
 8005a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a60:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <pxPortInitialiseStack+0x64>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b14      	subs	r3, #20
 8005a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3b04      	subs	r3, #4
 8005a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f06f 0202 	mvn.w	r2, #2
 8005a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3b20      	subs	r3, #32
 8005a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a86:	68fb      	ldr	r3, [r7, #12]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	08005a99 	.word	0x08005a99

08005a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aa2:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <prvTaskExitError+0x50>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aaa:	d009      	beq.n	8005ac0 <prvTaskExitError+0x28>
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e7fe      	b.n	8005abe <prvTaskExitError+0x26>
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ad2:	bf00      	nop
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0fc      	beq.n	8005ad4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ada:	bf00      	nop
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	2000000c 	.word	0x2000000c
 8005aec:	00000000 	.word	0x00000000

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b18:	4808      	ldr	r0, [pc, #32]	; (8005b3c <prvPortStartFirstTask+0x24>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f380 8814 	msr	CONTROL, r0
 8005b2a:	b662      	cpsie	i
 8005b2c:	b661      	cpsie	f
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	df00      	svc	0
 8005b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b3a:	bf00      	nop
 8005b3c:	e000ed08 	.word	0xe000ed08

08005b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b46:	4b44      	ldr	r3, [pc, #272]	; (8005c58 <xPortStartScheduler+0x118>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a44      	ldr	r2, [pc, #272]	; (8005c5c <xPortStartScheduler+0x11c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d109      	bne.n	8005b64 <xPortStartScheduler+0x24>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	613b      	str	r3, [r7, #16]
 8005b62:	e7fe      	b.n	8005b62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b64:	4b3c      	ldr	r3, [pc, #240]	; (8005c58 <xPortStartScheduler+0x118>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a3d      	ldr	r2, [pc, #244]	; (8005c60 <xPortStartScheduler+0x120>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d109      	bne.n	8005b82 <xPortStartScheduler+0x42>
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e7fe      	b.n	8005b80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b82:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <xPortStartScheduler+0x124>)
 8005b84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	22ff      	movs	r2, #255	; 0xff
 8005b92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4b30      	ldr	r3, [pc, #192]	; (8005c68 <xPortStartScheduler+0x128>)
 8005ba8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005baa:	4b30      	ldr	r3, [pc, #192]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005bac:	2207      	movs	r2, #7
 8005bae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bb0:	e009      	b.n	8005bc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005bb2:	4b2e      	ldr	r3, [pc, #184]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	4a2c      	ldr	r2, [pc, #176]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005bba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b80      	cmp	r3, #128	; 0x80
 8005bd0:	d0ef      	beq.n	8005bb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bd2:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f1c3 0307 	rsb	r3, r3, #7
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d009      	beq.n	8005bf2 <xPortStartScheduler+0xb2>
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	e7fe      	b.n	8005bf0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bf2:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	4a1c      	ldr	r2, [pc, #112]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005bfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c04:	4a19      	ldr	r2, [pc, #100]	; (8005c6c <xPortStartScheduler+0x12c>)
 8005c06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c10:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <xPortStartScheduler+0x130>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <xPortStartScheduler+0x130>)
 8005c16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c1c:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <xPortStartScheduler+0x130>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <xPortStartScheduler+0x130>)
 8005c22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c28:	f000 f8d6 	bl	8005dd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c2c:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <xPortStartScheduler+0x134>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c32:	f000 f8f5 	bl	8005e20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a0f      	ldr	r2, [pc, #60]	; (8005c78 <xPortStartScheduler+0x138>)
 8005c3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c42:	f7ff ff69 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c46:	f7ff f86f 	bl	8004d28 <vTaskSwitchContext>
	prvTaskExitError();
 8005c4a:	f7ff ff25 	bl	8005a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	e000ed00 	.word	0xe000ed00
 8005c5c:	410fc271 	.word	0x410fc271
 8005c60:	410fc270 	.word	0x410fc270
 8005c64:	e000e400 	.word	0xe000e400
 8005c68:	20000d14 	.word	0x20000d14
 8005c6c:	20000d18 	.word	0x20000d18
 8005c70:	e000ed20 	.word	0xe000ed20
 8005c74:	2000000c 	.word	0x2000000c
 8005c78:	e000ef34 	.word	0xe000ef34

08005c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <vPortEnterCritical+0x54>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <vPortEnterCritical+0x54>)
 8005c9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <vPortEnterCritical+0x54>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10e      	bne.n	8005cc4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <vPortEnterCritical+0x58>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <vPortEnterCritical+0x48>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	e7fe      	b.n	8005cc2 <vPortEnterCritical+0x46>
	}
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	2000000c 	.word	0x2000000c
 8005cd4:	e000ed04 	.word	0xe000ed04

08005cd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <vPortExitCritical+0x4c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <vPortExitCritical+0x22>
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	607b      	str	r3, [r7, #4]
 8005cf8:	e7fe      	b.n	8005cf8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005cfa:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <vPortExitCritical+0x4c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <vPortExitCritical+0x4c>)
 8005d02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d04:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <vPortExitCritical+0x4c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d104      	bne.n	8005d16 <vPortExitCritical+0x3e>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	2000000c 	.word	0x2000000c
	...

08005d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d30:	f3ef 8009 	mrs	r0, PSP
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <pxCurrentTCBConst>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f01e 0f10 	tst.w	lr, #16
 8005d40:	bf08      	it	eq
 8005d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	6010      	str	r0, [r2, #0]
 8005d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d54:	f380 8811 	msr	BASEPRI, r0
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f7fe ffe2 	bl	8004d28 <vTaskSwitchContext>
 8005d64:	f04f 0000 	mov.w	r0, #0
 8005d68:	f380 8811 	msr	BASEPRI, r0
 8005d6c:	bc09      	pop	{r0, r3}
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	6808      	ldr	r0, [r1, #0]
 8005d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d76:	f01e 0f10 	tst.w	lr, #16
 8005d7a:	bf08      	it	eq
 8005d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d80:	f380 8809 	msr	PSP, r0
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	f3af 8000 	nop.w

08005d90 <pxCurrentTCBConst>:
 8005d90:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop

08005d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005db0:	f7fe ff02 	bl	8004bb8 <xTaskIncrementTick>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <SysTick_Handler+0x3c>)
 8005dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dcc:	bf00      	nop
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	e000ed04 	.word	0xe000ed04

08005dd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <vPortSetupTimerInterrupt+0x34>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <vPortSetupTimerInterrupt+0x38>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <vPortSetupTimerInterrupt+0x3c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <vPortSetupTimerInterrupt+0x40>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	099b      	lsrs	r3, r3, #6
 8005df4:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <vPortSetupTimerInterrupt+0x44>)
 8005df6:	3b01      	subs	r3, #1
 8005df8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dfa:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <vPortSetupTimerInterrupt+0x34>)
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	e000e010 	.word	0xe000e010
 8005e10:	e000e018 	.word	0xe000e018
 8005e14:	20000000 	.word	0x20000000
 8005e18:	10624dd3 	.word	0x10624dd3
 8005e1c:	e000e014 	.word	0xe000e014

08005e20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e30 <vPortEnableVFP+0x10>
 8005e24:	6801      	ldr	r1, [r0, #0]
 8005e26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e2a:	6001      	str	r1, [r0, #0]
 8005e2c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e2e:	bf00      	nop
 8005e30:	e000ed88 	.word	0xe000ed88

08005e34 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e3a:	f3ef 8305 	mrs	r3, IPSR
 8005e3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b0f      	cmp	r3, #15
 8005e44:	d913      	bls.n	8005e6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e46:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <vPortValidateInterruptPriority+0x6c>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e50:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <vPortValidateInterruptPriority+0x70>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	7afa      	ldrb	r2, [r7, #11]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d209      	bcs.n	8005e6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	e7fe      	b.n	8005e6c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <vPortValidateInterruptPriority+0x74>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e76:	4b0d      	ldr	r3, [pc, #52]	; (8005eac <vPortValidateInterruptPriority+0x78>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d909      	bls.n	8005e92 <vPortValidateInterruptPriority+0x5e>
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	e7fe      	b.n	8005e90 <vPortValidateInterruptPriority+0x5c>
	}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	e000e3f0 	.word	0xe000e3f0
 8005ea4:	20000d14 	.word	0x20000d14
 8005ea8:	e000ed0c 	.word	0xe000ed0c
 8005eac:	20000d18 	.word	0x20000d18

08005eb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	; 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ebc:	f7fe fdc2 	bl	8004a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ec0:	4b57      	ldr	r3, [pc, #348]	; (8006020 <pvPortMalloc+0x170>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ec8:	f000 f90c 	bl	80060e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ecc:	4b55      	ldr	r3, [pc, #340]	; (8006024 <pvPortMalloc+0x174>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 808c 	bne.w	8005ff2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01c      	beq.n	8005f1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d013      	beq.n	8005f1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f023 0307 	bic.w	r3, r3, #7
 8005ef8:	3308      	adds	r3, #8
 8005efa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <pvPortMalloc+0x6a>
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e7fe      	b.n	8005f18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d068      	beq.n	8005ff2 <pvPortMalloc+0x142>
 8005f20:	4b41      	ldr	r3, [pc, #260]	; (8006028 <pvPortMalloc+0x178>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d863      	bhi.n	8005ff2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f2a:	4b40      	ldr	r3, [pc, #256]	; (800602c <pvPortMalloc+0x17c>)
 8005f2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f2e:	4b3f      	ldr	r3, [pc, #252]	; (800602c <pvPortMalloc+0x17c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f34:	e004      	b.n	8005f40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d903      	bls.n	8005f52 <pvPortMalloc+0xa2>
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f1      	bne.n	8005f36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f52:	4b33      	ldr	r3, [pc, #204]	; (8006020 <pvPortMalloc+0x170>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d04a      	beq.n	8005ff2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2208      	movs	r2, #8
 8005f62:	4413      	add	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	2308      	movs	r3, #8
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d91e      	bls.n	8005fbc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <pvPortMalloc+0xf4>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	e7fe      	b.n	8005fa2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	1ad2      	subs	r2, r2, r3
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fb6:	69b8      	ldr	r0, [r7, #24]
 8005fb8:	f000 f8f6 	bl	80061a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fbc:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <pvPortMalloc+0x178>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	4a18      	ldr	r2, [pc, #96]	; (8006028 <pvPortMalloc+0x178>)
 8005fc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fca:	4b17      	ldr	r3, [pc, #92]	; (8006028 <pvPortMalloc+0x178>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <pvPortMalloc+0x180>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d203      	bcs.n	8005fde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <pvPortMalloc+0x178>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a15      	ldr	r2, [pc, #84]	; (8006030 <pvPortMalloc+0x180>)
 8005fdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <pvPortMalloc+0x174>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ff2:	f7fe fd35 	bl	8004a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <pvPortMalloc+0x164>
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e7fe      	b.n	8006012 <pvPortMalloc+0x162>
	return pvReturn;
 8006014:	69fb      	ldr	r3, [r7, #28]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3728      	adds	r7, #40	; 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	20004924 	.word	0x20004924
 8006024:	20004930 	.word	0x20004930
 8006028:	20004928 	.word	0x20004928
 800602c:	2000491c 	.word	0x2000491c
 8006030:	2000492c 	.word	0x2000492c

08006034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d046      	beq.n	80060d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006046:	2308      	movs	r3, #8
 8006048:	425b      	negs	r3, r3
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <vPortFree+0xa8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4013      	ands	r3, r2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <vPortFree+0x42>
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e7fe      	b.n	8006074 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <vPortFree+0x5e>
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	e7fe      	b.n	8006090 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <vPortFree+0xa8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d019      	beq.n	80060d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d115      	bne.n	80060d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <vPortFree+0xa8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060b8:	f7fe fcc4 	bl	8004a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <vPortFree+0xac>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4413      	add	r3, r2
 80060c6:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <vPortFree+0xac>)
 80060c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f000 f86c 	bl	80061a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80060d0:	f7fe fcc6 	bl	8004a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060d4:	bf00      	nop
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20004930 	.word	0x20004930
 80060e0:	20004928 	.word	0x20004928

080060e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <prvHeapInit+0xac>)
 80060f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00c      	beq.n	8006118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3307      	adds	r3, #7
 8006102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0307 	bic.w	r3, r3, #7
 800610a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <prvHeapInit+0xac>)
 8006114:	4413      	add	r3, r2
 8006116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <prvHeapInit+0xb0>)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006122:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <prvHeapInit+0xb0>)
 8006124:	2200      	movs	r2, #0
 8006126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4413      	add	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006130:	2208      	movs	r2, #8
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1a9b      	subs	r3, r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0307 	bic.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a15      	ldr	r2, [pc, #84]	; (8006198 <prvHeapInit+0xb4>)
 8006144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006146:	4b14      	ldr	r3, [pc, #80]	; (8006198 <prvHeapInit+0xb4>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <prvHeapInit+0xb4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006164:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <prvHeapInit+0xb4>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	4a0a      	ldr	r2, [pc, #40]	; (800619c <prvHeapInit+0xb8>)
 8006172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <prvHeapInit+0xbc>)
 800617a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <prvHeapInit+0xc0>)
 800617e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	20000d1c 	.word	0x20000d1c
 8006194:	2000491c 	.word	0x2000491c
 8006198:	20004924 	.word	0x20004924
 800619c:	2000492c 	.word	0x2000492c
 80061a0:	20004928 	.word	0x20004928
 80061a4:	20004930 	.word	0x20004930

080061a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061b0:	4b28      	ldr	r3, [pc, #160]	; (8006254 <prvInsertBlockIntoFreeList+0xac>)
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e002      	b.n	80061bc <prvInsertBlockIntoFreeList+0x14>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d8f7      	bhi.n	80061b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d108      	bne.n	80061ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	441a      	add	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d118      	bne.n	8006230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <prvInsertBlockIntoFreeList+0xb0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d00d      	beq.n	8006226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	441a      	add	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	e008      	b.n	8006238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006226:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <prvInsertBlockIntoFreeList+0xb0>)
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e003      	b.n	8006238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d002      	beq.n	8006246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	2000491c 	.word	0x2000491c
 8006258:	20004924 	.word	0x20004924

0800625c <__libc_init_array>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4e0d      	ldr	r6, [pc, #52]	; (8006294 <__libc_init_array+0x38>)
 8006260:	4c0d      	ldr	r4, [pc, #52]	; (8006298 <__libc_init_array+0x3c>)
 8006262:	1ba4      	subs	r4, r4, r6
 8006264:	10a4      	asrs	r4, r4, #2
 8006266:	2500      	movs	r5, #0
 8006268:	42a5      	cmp	r5, r4
 800626a:	d109      	bne.n	8006280 <__libc_init_array+0x24>
 800626c:	4e0b      	ldr	r6, [pc, #44]	; (800629c <__libc_init_array+0x40>)
 800626e:	4c0c      	ldr	r4, [pc, #48]	; (80062a0 <__libc_init_array+0x44>)
 8006270:	f000 f82c 	bl	80062cc <_init>
 8006274:	1ba4      	subs	r4, r4, r6
 8006276:	10a4      	asrs	r4, r4, #2
 8006278:	2500      	movs	r5, #0
 800627a:	42a5      	cmp	r5, r4
 800627c:	d105      	bne.n	800628a <__libc_init_array+0x2e>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006284:	4798      	blx	r3
 8006286:	3501      	adds	r5, #1
 8006288:	e7ee      	b.n	8006268 <__libc_init_array+0xc>
 800628a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800628e:	4798      	blx	r3
 8006290:	3501      	adds	r5, #1
 8006292:	e7f2      	b.n	800627a <__libc_init_array+0x1e>
 8006294:	0800637c 	.word	0x0800637c
 8006298:	0800637c 	.word	0x0800637c
 800629c:	0800637c 	.word	0x0800637c
 80062a0:	08006380 	.word	0x08006380

080062a4 <memcpy>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	1e43      	subs	r3, r0, #1
 80062a8:	440a      	add	r2, r1
 80062aa:	4291      	cmp	r1, r2
 80062ac:	d100      	bne.n	80062b0 <memcpy+0xc>
 80062ae:	bd10      	pop	{r4, pc}
 80062b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062b8:	e7f7      	b.n	80062aa <memcpy+0x6>

080062ba <memset>:
 80062ba:	4402      	add	r2, r0
 80062bc:	4603      	mov	r3, r0
 80062be:	4293      	cmp	r3, r2
 80062c0:	d100      	bne.n	80062c4 <memset+0xa>
 80062c2:	4770      	bx	lr
 80062c4:	f803 1b01 	strb.w	r1, [r3], #1
 80062c8:	e7f9      	b.n	80062be <memset+0x4>
	...

080062cc <_init>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr

080062d8 <_fini>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr
